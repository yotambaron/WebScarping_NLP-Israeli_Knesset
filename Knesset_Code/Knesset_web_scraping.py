import urllib
import pickle
import dill
import urllib.request
import xml.etree.ElementTree as ET
from docx import Document
import numpy as np
import pandas as pd
import paragraphs
import requests
import time
import os
from bs4 import BeautifulSoup
from datetime import datetime, date
import datetime as dt
import re
import webbrowser


def save_object(obj, filename):
    with open(filename, 'rb') as outp:  # Overwrites any existing file.
        pickle.dump(obj, outp, pickle.HIGHEST_PROTOCOL)


def knesset_num_to_text(knesset_num):
    knesset = {25: 'כנסת העשרים וחמש', 24: 'כנסת העשרים וארבע', 23: 'כנסת העשרים ושלוש', 22: 'כנסת העשרים ושתיים',
               21: 'כנסת העשרים ואחת', 20: 'כנסת העשרים', 19: 'כנסת התשע-עשרה', 18: 'כנסת השמונה-עשרה',
               17: 'כנסת השבע-עשרה', 16: 'כנסת השש-עשרה', 15: 'כנסת החמש-עשרה', 14: 'כנסת הארבע-עשרה',
               13: 'כנסת השלוש-עשרה',
               12: 'כנסת השתים-עשרה', 11: 'כנסת האחת-עשרה', 10: 'כנסת העשירית', 9: 'כנסת התשיעית', 8: 'כנסת השמינית',
               7: 'כנסת השביעית', 6: 'כנסת השישית', 5: 'כנסת החמישית', 4: 'כנסת הרביעית', 3: 'כנסת השלישית',
               2: 'כנסת השנייה', 1: 'כנסת הראשונה'}
    return knesset[knesset_num]


def difference(d1, d2):
    d1 = str(d1)
    d2 = str(d2)
    print("Length of d1:", len(d1))
    print("Length of d2:", len(d2))
    differences = []
    for i in range(min(len(d1), len(d2))):
        if d1[i] != d2[i]:
            differences.append(i)
    print("The differences are:", differences)
    return differences


def data_by_knesset(knesset_num):
    data_event = {'כנסת העשרים וחמש': [
        '',
        '/wEdAAyB2E3H+coBsEVsrDbIJ96rbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGvNW8tt4rL+iY83aZ0mOfslsg6EnSi0zzLMLtsXXMfBuA=='],
        'כנסת העשרים וארבע': [
            '',
            '/wEdAAzXyqRIkfIuyIQX54gZkwbcbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGsBeyRWSrxTYNZ3xMN/zaSL70bBghWHityeASyEgkpRYg=='],
        'כנסת העשרים ושלוש': [
            '',
            '/wEdAAwhfa3OrUipKQntGNLgWP6GbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGvuXzwsIcE/qfoH/exyHMh0XPmnl9zUcUIwD7H/3LtlJQ=='],
        'כנסת העשרים ושתיים': [
            '',
            '/wEdAAz7zBV7A+1wkXeo8KT2WjNUbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGs6ouCwnpb/Pzw5Pc/6yKymAaY5RHwmHVx6vC/XPxUcQg=='],
        'כנסת העשרים ואחת': [
            '',
            '/wEdAAzm+GNqfpOP2h53uUXKLQwwbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGuidGirxq7eNuI7Ju02F1ga5EyNQ8czTgw/Ww3uSMbYAA=='],
        'כנסת העשרים': [
            '',
            '/wEdAAy/PiWAU2SP9lkUHwVwEN1gbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGuERYZLejpnc5TLZmc52kh3g3gxxMW3REIw75CO0hJUfA=='],
        'כנסת התשע-עשרה': [
            '',
            '/wEdAAy0+Jh5v/9mqOfG/bDs3lHxbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGvsX9NPf55CLkVdRUV0oFO/iMaaDuD2MqtoXW0hob5GTg=='],
        'כנסת השמונה-עשרה': [
            '',
            '/wEdAAxecilhO5pljYV4wvcKENKpbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGttxHa9OE+DhJ5SJGrT9r5jjznqBHDCF0QU8ucXoALuIg=='],
        'כנסת השבע-עשרה': [
            '',
            '/wEdAAylRPwQobDVh/iJRUEWeVkSbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGv6G80nT/TpfQVhVj3gsZvqv4ZXhA4vhco3AFZbz+vzFw=='],
        'כנסת השש-עשרה': [
            '/wEPDwUBMA9kFgJmD2QWAgIBD2QWBAIBD2QWBgIHD2QWAmYPZBYCAgEPFgIeE1ByZXZpb3VzQ29udHJvbE1vZGULKYgBTWljcm9zb2Z0LlNoYXJlUG9pbnQuV2ViQ29udHJvbHMuU1BDb250cm9sTW9kZSwgTWljcm9zb2Z0LlNoYXJlUG9pbnQsIFZlcnNpb249MTYuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49NzFlOWJjZTExMWU5NDI5YwFkAjEPZBYCAgMPZBYCZg9kFgJmDzwrAAYAZAIzD2QWAgIBD2QWAgUmZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YPDxYEHghMYXN0UGFnZQLFAh4LQ3VycmVudFBhZ2UCAWQWAgICD2QWJAIBDxYCHglpbm5lcmh0bWwFQNeX15nXpNeV16kg15HXpNeo15XXmNeV16fXldec15nXnSDXqdecINeT15nXldeg15kg15TXldeV16LXk9eV16pkAgMPDxYMHhxFbmFibGVFbWJlZGRlZEJhc2VTdHlsZXNoZWV0Zx4VRW5hYmxlRW1iZWRkZWRTY3JpcHRzZx4HTWF4RGF0ZQYAQHFvsT4xCR4MU2VsZWN0ZWREYXRlBgCADKYupMQIHgdNaW5EYXRlBgBAVyBTBVEIHhJSZXNvbHZlZFJlbmRlck1vZGULKXJUZWxlcmlrLldlYi5VSS5SZW5kZXJNb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDIyLjIuNjIyLjQwLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQBZBYEZg8UKwAIDxYWHwVnHgRUZXh0BRMyMDAzLTAyLTE3LTAwLTAwLTAwHhFFbmFibGVBcmlhU3VwcG9ydGgeDUxhYmVsQ3NzQ2xhc3MFB3JpTGFiZWweBFNraW4FB0RlZmF1bHQfBGceDEVtcHR5TWVzc2FnZQUM157XqteQ16jXmdeaHwgGAEBXIFMFUQgeEV9za2lwTU1WYWxpZGF0aW9uaB8JCysFAR8GBgBAcW+xPjEJZBYKHglGb3JlQ29sb3IKIx4FV2lkdGgbAAAAAAAAWUAHAAAAHgpSZXNpemVNb2RlCylyVGVsZXJpay5XZWIuVUkuUmVzaXplTW9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0AB4IQ3NzQ2xhc3MFEXJpVGV4dEJveCByaUhvdmVyHgRfIVNCAoYCFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFEXJpVGV4dEJveCByaUVycm9yHxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwUTcmlUZXh0Qm94IHJpRm9jdXNlZB8UAoYCFggfEAojHxEbAAAAAAAAWUAHAAAAHxMFE3JpVGV4dEJveCByaUVuYWJsZWQfFAKGAhYKHxAKIx8RGwAAAAAAAFlABwAAAB8SCysGAB8TBRRyaVRleHRCb3ggcmlEaXNhYmxlZB8UAoYCFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFEXJpVGV4dEJveCByaUVtcHR5HxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwUQcmlUZXh0Qm94IHJpUmVhZB8UAoYCZAICDxQrAA0PFhoFD1JlbmRlckludmlzaWJsZWcFCUN1bHR1cmVJRAKNCAUNU2VsZWN0ZWREYXRlcw8FjwFUZWxlcmlrLldlYi5VSS5DYWxlbmRhci5Db2xsZWN0aW9ucy5EYXRlVGltZUNvbGxlY3Rpb24sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjIuMi42MjIuNDAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBQrAAAFEUVuYWJsZU11bHRpU2VsZWN0aAUETWluRAYAQFcgUwVRCAUERm9jRAYAQCqK6C/bCAUNQ3VsdHVyZU5hbWVJRAUFaGUtSUwFA0VSU2gFCUNlbGxBbGlnbgsqKVN5c3RlbS5XZWIuVUkuV2ViQ29udHJvbHMuSG9yaXpvbnRhbEFsaWduAgUNQ3VsdHVyZUluZm9JRCgpbVN5c3RlbS5HbG9iYWxpemF0aW9uLkN1bHR1cmVJbmZvLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFaGUtSUwFC1NwZWNpYWxEYXlzDwWSAVRlbGVyaWsuV2ViLlVJLkNhbGVuZGFyLkNvbGxlY3Rpb25zLkNhbGVuZGFyRGF5Q29sbGVjdGlvbiwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAAUETWF4RAYAgAdF6D0xCQUTU2hvd090aGVyTW9udGhzRGF5c2gPFgofC2gfBWcfDQUHRGVmYXVsdB8EZx8JCysFAWRkFgQfEwULcmNNYWluVGFibGUfFAICFgQfEwUMcmNPdGhlck1vbnRoHxQCAmQWBB8TBQpyY1NlbGVjdGVkHxQCAmQWBB8TBQpyY0Rpc2FibGVkHxQCAhYEHxMFDHJjT3V0T2ZSYW5nZR8UAgIWBB8TBQlyY1dlZWtlbmQfFAICFgQfEwUHcmNIb3Zlch8UAgIWBB8TBTFSYWRDYWxlbmRhck1vbnRoVmlldyBSYWRDYWxlbmRhck1vbnRoVmlld19EZWZhdWx0HxQCAhYEHxMFCXJjVmlld1NlbB8UAgJkAgUPDxYMHwRnHwVnHwYGAEBxb7E+MQkfBwYAwCkByS/ICB8IBgBAVyBTBVEIHwkLKwUBZBYEZg8UKwAIDxYWHwVnHwoFEzIwMDYtMDQtMTctMDAtMDAtMDAfC2gfDAUHcmlMYWJlbB8NBQdEZWZhdWx0HwRnHw4FD9ei15Mg16rXkNeo15nXmh8IBgBAVyBTBVEIHw9oHwkLKwUBHwYGAEBxb7E+MQlkFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFEXJpVGV4dEJveCByaUhvdmVyHxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwURcmlUZXh0Qm94IHJpRXJyb3IfFAKGAhYKHxAKIx8RGwAAAAAAAFlABwAAAB8SCysGAB8TBRNyaVRleHRCb3ggcmlGb2N1c2VkHxQChgIWCB8QCiMfERsAAAAAAABZQAcAAAAfEwUTcmlUZXh0Qm94IHJpRW5hYmxlZB8UAoYCFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFFHJpVGV4dEJveCByaURpc2FibGVkHxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwURcmlUZXh0Qm94IHJpRW1wdHkfFAKGAhYKHxAKIx8RGwAAAAAAAFlABwAAAB8SCysGAB8TBRByaVRleHRCb3ggcmlSZWFkHxQChgJkAgIPFCsADQ8WGgUPUmVuZGVySW52aXNpYmxlZwUJQ3VsdHVyZUlEAo0IBQ1TZWxlY3RlZERhdGVzDwWPAVRlbGVyaWsuV2ViLlVJLkNhbGVuZGFyLkNvbGxlY3Rpb25zLkRhdGVUaW1lQ29sbGVjdGlvbiwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAAURRW5hYmxlTXVsdGlTZWxlY3RoBQRNaW5EBgBAVyBTBVEIBQRGb2NEBgBAKoroL9sIBQ1DdWx0dXJlTmFtZUlEBQVoZS1JTAUDRVJTaAUJQ2VsbEFsaWduCysHAgUNQ3VsdHVyZUluZm9JRCgrCAVoZS1JTAULU3BlY2lhbERheXMPBZIBVGVsZXJpay5XZWIuVUkuQ2FsZW5kYXIuQ29sbGVjdGlvbnMuQ2FsZW5kYXJEYXlDb2xsZWN0aW9uLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDIyLjIuNjIyLjQwLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwAABQRNYXhEBgCAB0XoPTEJBRNTaG93T3RoZXJNb250aHNEYXlzaA8WCh8LaB8FZx8NBQdEZWZhdWx0HwRnHwkLKwUBZGQWBB8TBQtyY01haW5UYWJsZR8UAgIWBB8TBQxyY090aGVyTW9udGgfFAICZBYEHxMFCnJjU2VsZWN0ZWQfFAICZBYEHxMFCnJjRGlzYWJsZWQfFAICFgQfEwUMcmNPdXRPZlJhbmdlHxQCAhYEHxMFCXJjV2Vla2VuZB8UAgIWBB8TBQdyY0hvdmVyHxQCAhYEHxMFMVJhZENhbGVuZGFyTW9udGhWaWV3IFJhZENhbGVuZGFyTW9udGhWaWV3X0RlZmF1bHQf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HwkLKwUBHwVnZA8UKwAfFCsAAg8WBh8KBRPXm9ecINeU15XXldei15PXldeqHxgFATAfGWdkZBQrAAIPFgYfCgUT15XXoteT16og15TXm9eg16HXqh8YBQExHxloZGQUKwACDxYGHwoFFdeV16LXk9eqINeU15vXodek15nXnR8YBQEyHxloZGQUKwACDxYGHwoFFdeV16LXk9eqINeU15vXnNeb15zXlB8YBQEzHxloZGQUKwACDxYGHwoFIteV16LXk9eqINeU15fXldelINeV15TXkdeZ15jXl9eV158fGAUBNB8ZaGRkFCsAAg8WBh8KBSvXldei15PXqiDXlNek16DXmdedINeV15TXkteg16og15TXodeR15nXkdeUHxgFATUfGWhkZBQrAAIPFgYfCgUm15XXoteT16og15TXl9eV16fXlCwg15fXldenINeV157Xqdek15gfGAUBNh8ZaGRkFCsAAg8WBh8KBTTXldei15PXqiDXlNei15zXmdeZ15QsINeU16fXnNeZ15jXlCDXldeU16rXpNeV16bXldeqHxgFAjI3HxloZGQUKwACDxYGHwoFMteV16LXk9eqINeU15fXmdeg15XXmiwg15TXqteo15HXldeqINeV15TXodek15XXqNeYHxgFATgfGWhkZBQrAAIPFgYfCgUk15XXoteT16og15TXoteR15XXk9eUINeV15TXqNeV15XXl9eUHxgFAjI4HxloZGQUKwACDxYGHwoFNdeU15XXldei15PXlCDXnNei16DXmdeZ16DXmSDXkdeZ16fXldeo16og15TXnteT15nXoNeUHxgFAjEwHxloZGQUKwACDxYGHwoFSdeU15XXldei15PXlCDXnNen15nXk9eV150g157Xotee15Mg15TXkNeZ16nXlCDXldec16nXldeV15nXldefINee15LXk9eo15kfGAUCMTEfGWhkZBQrAAIPFgYfCgUq15XXoteT16ogINeU157Xk9eiICDXldeU15jXm9eg15XXnNeV15LXmdeUHxgFAjEzHxloZGQUKwACDxYGHwoFFdeV16LXk9eqINeU15DXqteZ16fXlB8YBQIxNB8ZaGRkFCsAAg8WBh8KBVHXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXnteQ15HXpyDXkdep15nXnteV16kg15HXodee15nXnSDXldeR15DXnNeb15XXlNeV15wfGAUCMTIfGWhkZBQrAAIPFgYfCgUz15TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec15bXm9eV15nXldeqINeU15nXnNeTHxgFAjI1HxloZGQUKwACDxYGHwoFM9eU15XXldei15PXlCDXlNee15nXldeX15PXqiDXnNei15XXkdeT15nXnSDXlteo15nXnR8YBQIxNR8ZaGRkFCsAAg8WBh8KBTXXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXpNeg15nXldeqINeU16bXmdeR15XXqB8YBQIxOR8ZaGRkFCsAAg8WBh8KBUbXldei15PXlCDXnteZ15XXl9eT16og15zXoteg15nXnyDXnNen15fXmSDXkNeh15XXnyDXktep16gg15TXnteb15HXmdeUHxgFAjE3HxloZGQUKwACDxYGHwoFa9eV16LXk9eqINeX16fXmdeo15Qg16TXqNec157XoNeY16jXmdeqINeR16DXldep15Ag15DXmdeq15XXqCDXldeU16nXkdeqINeg15vXodeZ150g16nXnCDXoNeh16TXmSDXlNep15XXkNeUHxgFAjMxHxloZGQUKwACDxYGHwoFf9eV16LXk9eqINeX16fXmdeo15Qg16TXqNec157XoNeY16jXmdeqINeR16LXoNeZ158g15TXntem15XXp9eUINeU15vXodek15nXqiDXlNee16rXntep15vXqiDXqdecINeU16jXqdeV15nXldeqINeU157Xp9eV157XmdeV16ofGAUCMzIfGWhkZBQrAAIPFgYfCgVL15XXoteT16og15TXl9en15nXqNeUINeU16TXqNec157XoNeY16jXmdeqINec16LXoNeZ15nXnyDXlNeh15fXqCDXkdeg16nXmdedHxgFAjMzHxloZGQUKwACDxYGHwoFTdeV16LXk9eqINeX16fXmdeo15Qg16TXqNec157XoNeY16jXmdeqINeR16DXldep15Ag15TXkNec15nXnteV16og15HXodek15XXqNeYHxgFAjM0HxloZGQUKwACDxYGHwoFRdeV16LXk9eqINeU15fXp9eZ16jXlCDXlNek16jXnNee16DXmNeo15nXqiDXkdeg15XXqdeQINee16nXpyDXlNee15nXnR8YBQIzNR8ZaGRkFCsAAg8WBh8KBT/Xldei15PXlCDXnteZ15XXl9eT16og15zXoNeV16nXkCDXlNeg16nXmdeo15Qg157Xkdeq15kg15TXodek16gfGAUCMzYfGWhkZBQrAAIPFgYfCgVc15XXoteT16og15fXp9eZ16jXlCDXpNeo15zXnteg15jXqNeZ16og15HXoNeV16nXkCDXlNek16LXqNeZ150g15TXl9eR16jXqteZ15nXnSDXkdeZ16nXqNeQ15wfGAUCMzcfGWhkZBQrAAIPFgYfCgWRAdeV16LXk9eUINee15nXldeX15PXqiDXnNeU16bXoteqINeX15XXpyDXqdeZ16jXldeqINeU15HXmdeY15fXldefICjXk9eX15nXmdeqINep15nXqNeV16og15zXqtec157XmdeT15kg15nXqdeZ15HXldeqINep16rXldeo16rXnSDXkNeV157XoNeV16rXnSkfGAUCMzgfGWhkZBQrAAIPFgYfCgVL15XXoteT16og15fXp9eZ16jXlCDXpNeo15zXnteg15jXqNeZ16og15HXoNeV16nXkCDXqteQ15XXoNeV16og15TXk9eo15vXmdedHxgFAjY4HxloZGQUKwACDxYGHwoFPdeV16LXk9eUINeU157XmdeZ16LXpteqINeR16DXldep15Ag15TXkdeT15nXp9eUINeR15HXoNen15nXnSAfGAUDMTQ5HxloZGQUKwACDxYGHwoFMNeV16LXk9eqINee16nXoNeUINec157XkNeR16cg15HXodeX16gg15HXoNep15nXnR8YBQMxODUfGWhkZBQrAAIPFgYfCgVv15XXoteT16og15fXp9eZ16jXlCDXpNeo15zXnteg15jXqNeZ16og15HXoNeV16nXkDog15LXmdec15XXmSDXlNep15fXmdeq15XXqiDXkdee157XqdecINeR157Xk9eZ16DXqiDXmdep16jXkNecHxgFAzIwMh8ZaGRkDxQrAR9mZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmFgEFd1RlbGVyaWsuV2ViLlVJLlJhZENvbWJvQm94SXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FkJmDw8WBB8TBQlyY2JIZWFkZXIfFAICZGQCAQ8PFgQfEwUJcmNiRm9vdGVyHxQCAmRkAgIPDxYGHwoFE9eb15wg15TXldeV16LXk9eV16ofGAUBMB8ZZ2RkAgMPDxYGHwoFE9eV16LXk9eqINeU15vXoNeh16ofGAUBMR8ZaGRkAgQPDxYGHwoFFdeV16LXk9eqINeU15vXodek15nXnR8YBQEyHxloZGQCBQ8PFgYfCgUV15XXoteT16og15TXm9ec15vXnNeUHxgFATMfGWhkZAIGDw8WBh8KBSLXldei15PXqiDXlNeX15XXpSDXldeU15HXmdeY15fXldefHxgFATQfGWhkZAIHDw8WBh8KBSvXldei15PXqiDXlNek16DXmdedINeV15TXkteg16og15TXodeR15nXkdeUHxgFATUfGWhkZAIIDw8WBh8KBSbXldei15PXqiDXlNeX15XXp9eULCDXl9eV16cg15XXntep16TXmB8YBQE2HxloZGQCCQ8PFgYfCgU015XXoteT16og15TXotec15nXmdeULCDXlNen15zXmdeY15Qg15XXlNeq16TXldem15XXqh8YBQIyNx8ZaGRkAgoPDxYGHwoFMteV16LXk9eqINeU15fXmdeg15XXmiwg15TXqteo15HXldeqINeV15TXodek15XXqNeYHxgFATgfGWhkZAILDw8WBh8KBSTXldei15PXqiDXlNei15HXldeT15Qg15XXlNeo15XXldeX15QfGAUCMjgfGWhkZAIMDw8WBh8KBTXXlNeV15XXoteT15Qg15zXoteg15nXmdeg15kg15HXmden15XXqNeqINeU157Xk9eZ16DXlB8YBQIxMB8ZaGRkAg0PDxYGHwoFSdeU15XXldei15PXlCDXnNen15nXk9eV150g157Xotee15Mg15TXkNeZ16nXlCDXldec16nXldeV15nXldefINee15LXk9eo15kfGAUCMTEfGWhkZAIODw8WBh8KBSrXldei15PXqiAg15TXnteT16IgINeV15TXmNeb16DXldec15XXkteZ15QfGAUCMTMfGWhkZAIPDw8WBh8KBRXXldei15PXqiDXlNeQ16rXmden15QfGAUCMTQfGWhkZAIQDw8WBh8KBVHXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXnteQ15HXpyDXkdep15nXnteV16kg15HXodee15nXnSDXldeR15DXnNeb15XXlNeV15wfGAUCMTIfGWhkZAIRDw8WBh8KBTPXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXlteb15XXmdeV16og15TXmdec15MfGAUCMjUfGWhkZAISDw8WBh8KBTPXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXoteV15HXk9eZ150g15bXqNeZ150fGAUCMTUfGWhkZAITDw8WBh8KBTXXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXpNeg15nXldeqINeU16bXmdeR15XXqB8YBQIxOR8ZaGRkAhQPDxYGHwoFRteV16LXk9eUINee15nXldeX15PXqiDXnNei16DXmdefINec16fXl9eZINeQ16HXldefINeS16nXqCDXlNee15vXkdeZ15QfGAUCMTcfGWhkZAIVDw8WBh8KBWvXldei15PXqiDXl9en15nXqNeUINek16jXnNee16DXmNeo15nXqiDXkdeg15XXqdeQINeQ15nXqteV16gg15XXlNep15HXqiDXoNeb16HXmdedINep15wg16DXodek15kg15TXqdeV15DXlB8YBQIzMR8ZaGRkAhYPDxYGHwoFf9eV16LXk9eqINeX16fXmdeo15Qg16TXqNec157XoNeY16jXmdeqINeR16LXoNeZ158g15TXntem15XXp9eUINeU15vXodek15nXqiDXlNee16rXntep15vXqiDXqdecINeU16jXqdeV15nXldeqINeU157Xp9eV157XmdeV16ofGAUCMzIfGWhkZAIXDw8WBh8KBUvXldei15PXqiDXlNeX16fXmdeo15Qg15TXpNeo15zXnteg15jXqNeZ16og15zXoteg15nXmdefINeU16HXl9eoINeR16DXqdeZ150fGAUCMzMfGWhkZAIYDw8WBh8KBU3Xldei15PXqiDXl9en15nXqNeUINek16jXnNee16DXmNeo15nXqiDXkdeg15XXqdeQINeU15DXnNeZ157XldeqINeR16HXpNeV16jXmB8YBQIzNB8ZaGRkAhkPDxYGHwoFRdeV16LXk9eqINeU15fXp9eZ16jXlCDXlNek16jXnNee16DXmNeo15nXqiDXkdeg15XXqdeQINee16nXpyDXlNee15nXnR8YBQIzNR8ZaGRkAhoPDxYGHwoFP9eV16LXk9eUINee15nXldeX15PXqiDXnNeg15XXqdeQINeU16DXqdeZ16jXlCDXnteR16rXmSDXlNeh16TXqB8YBQIzNh8ZaGRkAhsPDxYGHwoFXNeV16LXk9eqINeX16fXmdeo15Qg16TXqNec157XoNeY16jXmdeqINeR16DXldep15Ag15TXpNei16jXmdedINeU15fXkdeo16rXmdeZ150g15HXmdep16jXkNecHxgFAjM3HxloZGQCHA8PFgYfCgWRAdeV16LXk9eUINee15nXldeX15PXqiDXnNeU16bXoteqINeX15XXpyDXqdeZ16jXldeqINeU15HXmdeY15fXldefICjXk9eX15nXmdeqINep15nXqNeV16og15zXqtec157XmdeT15kg15nXqdeZ15HXldeqINep16rXldeo16rXnSDXkNeV157XoNeV16rXnSkfGAUCMzgfGWhkZAIdDw8WBh8KBUvXldei15PXqiDXl9en15nXqNeUINek16jXnNee16DXmNeo15nXqiDXkdeg15XXqdeQINeq15DXldeg15XXqiDXlNeT16jXm9eZ150fGAUCNjgfGWhkZAIeDw8WBh8KBT3Xldei15PXlCDXlNee15nXmdei16bXqiDXkdeg15XXqdeQINeU15HXk9eZ16fXlCDXkdeR16DXp9eZ150gHxgFAzE0OR8ZaGRkAh8PDxYGHwoFMNeV16LXk9eqINee16nXoNeUINec157XkNeR16cg15HXodeX16gg15HXoNep15nXnR8YBQMxODUfGWhkZAIgDw8WBh8KBW/Xldei15PXqiDXl9en15nXqNeUINek16jXnNee16DXmNeo15nXqiDXkdeg15XXqdeQOiDXkteZ15zXldeZINeU16nXl9eZ16rXldeqINeR157Xntep15wg15HXnteT15nXoNeqINeZ16nXqNeQ15wfGAUDMjAyHxloZGQCFw8PFgIfCmVkZAIZDxYCHgVzdHlsZQUNZGlzcGxheTpncmlkO2QCHQ8PFgQfBWcfBGdkZAIfDzwrAAUBAA8WHB8YZR4MQXV0b1Bvc3RCYWNrZx4GVGFyZ2V0ZR8E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150g15TXp9eY16DXmdedINei15wg15DXoyDXlNek15fXqteV16og15TXqNeZ15HXmdeqINep15wg15HXoNenINeZ16nXqNeQ15wgZGQCCQ8PFgIfCgU/OCDXkdek15HXqNeV15DXqCAyMDA5LCDXmSLXkyDXkdep15HXmCDXqtep16Ei15gsINeR16nXoteUIDEwOjAwZGQCCw8PFgIfJmhkFgJmDxUBAGQCDA8VAQBkAg0PFgIfJQVHL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGFnZXMvQWxsQ29tbWl0dGVlc0FnZW5kYS5hc3B4P1RhYj0zJkl0ZW1JRD0zMTY5MTJkAggPZBYQAgMPFgIfJQUaL0FjdGl2aXR5L2NvbW1pdHRlZXMvTGFib3IWAgIBDw8WAh8KBSTXldei15PXqiDXlNei15HXldeT15Qg15XXlNeo15XXldeX15RkZAIFDxYCHyUFOmh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE3L0NvbW1pdHRlZXMvMTdfcHR2XzEzNzQwNi5kb2NkAgYPFQEAZAIHDxYCHyUFOmh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE3L0NvbW1pdHRlZXMvMTdfcHR2XzEzNzQwNi5kb2MWAgIBDw8WAh8KBb4BMSkg15TXodeb150g15HXk9eR16gg16rXqdec15XXnSDXktee15zXkNeV16og157XmdeV15fXk9eV16og15zXodeZ15XXoiDXkdee16fXqNeUINeQ15HXmNec15QgMikg15TXodeb150g15HXk9eR16gg16LXmdeT15XXkyDXlNei16HXp9eqINei15XXkdeT15nXnSDXmdep16jXkNec15nXmdedINeR16rXl9eV150g15TXodeZ16LXldeTIGRkAgkPDxYCHwoFPzUg15HXpNeR16jXldeQ16ggMjAwOSwg15ki15Ag15HXqdeR15gg16rXqdehIteYLCDXkdep16LXlCAxMDowMGRkAgsPDxYCHyZoZBYCZg8VAQBkAgwPFQEAZAINDxYCHyUFRy9BY3Rpdml0eS9jb21taXR0ZWVzL1BhZ2VzL0FsbENvbW1pdHRlZXNBZ2VuZGEuYXNweD9UYWI9MyZJdGVtSUQ9MzE3MDE2ZAIJD2QWEAIDDxYCHyUFJC9BY3Rpdml0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bmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD05NzYWAmYPFQEP15DXldek15nXqCDXm9elZAILDxYCHyUFPS9BY3Rpdml0eS9jb21taXR0ZWVzL2tuZXNzZXQvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUhL0FjdGl2aXR5L2NvbW1pdHRlZXMva25lc3NldC9OZXdzZAIXDxYCHyUFOi9BY3Rpdml0eS9jb21taXR0ZWVzL2tuZXNzZXQvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAgEPZBYOAgEPFgIfJQUcL0FjdGl2aXR5L2NvbW1pdHRlZXMvRmluYW5jZRYCZg8VARXXldei15PXqiDXlNeb16HXpNeZ151kAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT1odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTM1FgJmDxUBD9ee16nXlCDXktek16DXmWQCCw8WAh8lBT0vQWN0aXZpdHkvY29tbWl0dGVlcy9GaW5hbmNlL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIS9BY3Rpdml0eS9jb21taXR0ZWVzL0ZpbmFuY2UvTmV3c2QCFw8WAh8lBTovQWN0aXZpdHkvY29tbWl0dGVlcy9GaW5hbmNlL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAICD2QWDgIBDxYCHyUFHi9BY3Rpdml0eS9jb21taXR0ZWVzL0Vjb25vbWljcxYCZg8VARXXldei15PXqiDXlNeb15zXm9ec15RkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT5odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTkxNBYCZg8VAQ/Xk9eV15Mg15HXmdeY159kAgsPFgIfJQU/L0FjdGl2aXR5L2NvbW1pdHRlZXMvRWNvbm9taWNzL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIy9BY3Rpdml0eS9jb21taXR0ZWVzL0Vjb25vbWljcy9OZXdzZAIXDxYCHyUFPC9BY3Rpdml0eS9jb21taXR0ZWVzL0Vjb25vbWljcy9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCAw9kFg4CAQ8WAh8lBSMvQWN0aXZpdHkvY29tbWl0dGVlcy9Gb3JlaWduQWZmYWlycxYCZg8VASLXldei15PXqiDXlNeX15XXpSDXldeU15HXmdeY15fXldefZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU8aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD0xFgJmDxUBIteZ15XXnNeZINeZ15XXkNecINeQ15PXnNep15jXmdeZ159kAgsPFgIfJQVEL0FjdGl2aXR5L2NvbW1pdHRlZXMvRm9yZWlnbkFmZmFpcnMvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUoL0FjdGl2aXR5L2NvbW1pdHRlZXMvRm9yZWlnbkFmZmFpcnMvTmV3c2QCFw8WAh8lBUEvQWN0aXZpdHkvY29tbWl0dGVlcy9Gb3JlaWduQWZmYWlycy9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCBA9kFg4CAQ8WAh8lBSQvQWN0aXZpdHkvY29tbWl0dGVlcy9JbnRlcm5hbEFmZmFpcnMWAmYPFQEr15XXoteT16og15TXpNeg15nXnSDXldeU15LXoNeqINeU16HXkdeZ15HXlGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFPmh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9ODYxFgJmDxUBD9eZ16LXp9eRINeQ16nXqGQCCw8WAh8lBUUvQWN0aXZpdHkvY29tbWl0dGVlcy9JbnRlcm5hbEFmZmFpcnMvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUpL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxBZmZhaXJzL05ld3NkAhcPFgIfJQVCL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxBZmZhaXJzL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIFD2QWDgIBDxYCHyUFGS9BY3Rpdml0eS9jb21taXR0ZWVzL2h1a2EWAmYPFQEm15XXoteT16og15TXl9eV16fXlCwg15fXldenINeV157Xqdek15hkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwNjcWAmYPFQET16nXnteX15Qg16jXldeY157Xn2QCCw8WAh8lBTovQWN0aXZpdHkvY29tbWl0dGVlcy9odWthL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFHi9BY3Rpdml0eS9jb21taXR0ZWVzL2h1a2EvTmV3c2QCFw8WAh8lBTcvQWN0aXZpdHkvY29tbWl0dGVlcy9odWthL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIGD2QWDgIBDxYCHyUFIC9BY3Rpdml0eS9jb21taXR0ZWVzL0ltbWlncmF0aW9uFgJmDxUBNNeV16LXk9eqINeU16LXnNeZ15nXlCwg15TXp9ec15nXmNeUINeV15TXqtek15XXpteV16pkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT5odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTk1MRYCZg8VARHXoteV15PXkyDXpNeV16jXqGQCCw8WAh8lBUEvQWN0aXZpdHkvY29tbWl0dGVlcy9JbW1pZ3JhdGlvbi9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSUvQWN0aXZpdHkvY29tbWl0dGVlcy9JbW1pZ3JhdGlvbi9OZXdzZAIXDxYCHyUFPi9BY3Rpdml0eS9jb21taXR0ZWVzL0ltbWlncmF0aW9uL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIHD2QWDgIBDxYCHyUFHi9BY3Rpdml0eS9jb21taXR0ZWVzL0VkdWNhdGlvbhYCZg8VATLXldei15PXqiDXlNeX15nXoNeV15osINeU16rXqNeR15XXqiDXldeU16HXpNeV16jXmGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFP2h0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9MTA0MxYCZg8VARHXmdeV16HXoyDXmNeZ15nXkWQCCw8WAh8lBT8vQWN0aXZpdHkvY29tbWl0dGVlcy9FZHVjYXRpb24vUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUjL0FjdGl2aXR5L2NvbW1pdHRlZXMvRWR1Y2F0aW9uL05ld3NkAhcPFgIfJQU8L0FjdGl2aXR5L2NvbW1pdHRlZXMvRWR1Y2F0aW9uL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIID2QWDgIBDxYCHyUFGi9BY3Rpdml0eS9jb21taXR0ZWVzL0xhYm9yFgJmDxUBJNeV16LXk9eqINeU16LXkdeV15PXlCDXldeU16jXldeV15fXlGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFPmh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9NzU0FgJmDxUBF9eZ16nXqNeQ15wg15DXmdeZ15vXnNeoZAILDxYCHyUFOy9BY3Rpdml0eS9jb21taXR0ZWVzL0xhYm9yL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFHy9BY3Rpdml0eS9jb21taXR0ZWVzL0xhYm9yL05ld3NkAhcPFgIfJQU4L0FjdGl2aXR5L2NvbW1pdHRlZXMvTGFib3IvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAgkPZBYOAgEPFgIfJQUhL0FjdGl2aXR5L2NvbW1pdHRlZXMvU3RhdGVDb250cm9sFgJmDxUBNdeU15XXldei15PXlCDXnNei16DXmdeZ16DXmSDXkdeZ16fXldeo16og15TXnteT15nXoNeUZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU+aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD04NzYWAmYPFQEP157Xmden15kg15zXldeZZAILDxYCHyUFQi9BY3Rpdml0eS9jb21taXR0ZWVzL1N0YXRlQ29udHJvbC9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSYvQWN0aXZpdHkvY29tbWl0dGVlcy9TdGF0ZUNvbnRyb2wvTmV3c2QCFw8WAh8lBT8vQWN0aXZpdHkvY29tbWl0dGVlcy9TdGF0ZUNvbnRyb2wvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAgoPZBYOAgEPFgIfJQUaL0FjdGl2aXR5L2NvbW1pdHRlZXMvV29tZW4WAmYPFQFJ15TXldeV16LXk9eUINec16fXmdeT15XXnSDXntei157XkyDXlNeQ15nXqdeUINeV15zXqdeV15XXmdeV158g157XkteT16jXmWQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VASHXkdeo15DXqdeV16og15fXkdeo16og15TXm9eg16HXqiBkAgcPFgIfJQU+aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD05MDUWAmYPFQET16TXoNeZ16DXlCDXqtee16DXlWQCCw8WAh8lBTsvQWN0aXZpdHkvY29tbWl0dGVlcy9Xb21lbi9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBR8vQWN0aXZpdHkvY29tbWl0dGVlcy9Xb21lbi9OZXdzZAIXDxYCHyUFOC9BY3Rpdml0eS9jb21taXR0ZWVzL1dvbWVuL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAILD2QWDgIBDxYCHyUFHC9BY3Rpdml0eS9jb21taXR0ZWVzL1NjaWVuY2UWAmYPFQEq15XXoteT16ogINeU157Xk9eiICDXldeU15jXm9eg15XXnNeV15LXmdeUZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU+aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD05MzgWAmYPFQET15DXmdeZ157XnyDXoteV15PXlGQCCw8WAh8lBT0vQWN0aXZpdHkvY29tbWl0dGVlcy9TY2llbmNlL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIS9BY3Rpdml0eS9jb21taXR0ZWVzL1NjaWVuY2UvTmV3c2QCFw8WAh8lBTovQWN0aXZpdHkvY29tbWl0dGVlcy9TY2llbmNlL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIMD2QWDgIBDxYCHyUFGy9BY3Rpdml0eS9jb21taXR0ZWVzL2hlYWx0aBYCZg8VARfXldei15PXqiDXlNeR16jXmdeQ15XXqmQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFP2h0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9MTAzORYCZg8VARXXkNeV16jXmdeQ15wg15HXldeh15VkAgsPFgIfJQU8L0FjdGl2aXR5L2NvbW1pdHRlZXMvaGVhbHRoL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIC9BY3Rpdml0eS9jb21taXR0ZWVzL2hlYWx0aC9OZXdzZAIXDxYCHyUFOS9BY3Rpdml0eS9jb21taXR0ZWVzL2hlYWx0aC9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCDQ9kFg4CAQ8WAh8lBSUvQWN0aXZpdHkvY29tbWl0dGVlcy9JbnRlcm5hbFNlY3VyaXR5FgJmDxUBJteU15XXldei15PXlCDXnNeR15nXmNeX15XXnyDXnNeQ15XXnteZZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU/aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD0xMTEwFgJmDxUBE9em15HXmden15Qg16TXldeS15xkAgsPFgIfJQVGL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxTZWN1cml0eS9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSovQWN0aXZpdHkvY29tbWl0dGVlcy9JbnRlcm5hbFNlY3VyaXR5L05ld3NkAhcPFgIfJQVDL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxTZWN1cml0eS9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCDg9kFg4CAQ8WAh8lBSMvQWN0aXZpdHkvY29tbWl0dGVlcy9QdWJsaWNQcm9qZWN0cxYCZg8VASzXlNeV15XXoteT15Qg15zXnteZ15bXnteZ150g16bXmdeR15XXqNeZ15nXnWQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFP2h0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9MTA5MBYCZg8VAQ3XkNeV15TXkyDXmNecZAILDxYCHyUFRC9BY3Rpdml0eS9jb21taXR0ZWVzL1B1Ymxp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lNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwOTcWAmYPFQEW15DXkdeo15TXnSAg15HXptec15DXnGQCCw8WAh8lBT8vQWN0aXZpdHkvY29tbWl0dGVlcy9wZXJpcGhlcnkvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUjL0FjdGl2aXR5L2NvbW1pdHRlZXMvcGVyaXBoZXJ5L05ld3NkAhcPFgIfJQU8L0FjdGl2aXR5L2NvbW1pdHRlZXMvcGVyaXBoZXJ5L1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIVD2QWDgIBDxYCHyUFHi9BY3Rpdml0eS9jb21taXR0ZWVzL3N1cnZpdm9ycxYCZg8VAUDXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXmNeZ16TXldecINeR16nXldeo15PXmSDXlNep15XXkNeUZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBIdeR16jXkNep15XXqiDXl9eR16jXqiDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwMDYWAmYPFQEP157Xmdeo15Eg15vXlNefZAILDxYCHyUFPy9BY3Rpdml0eS9jb21taXR0ZWVzL3N1cnZpdm9ycy9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSMvQWN0aXZpdHkvY29tbWl0dGVlcy9zdXJ2aXZvcnMvTmV3c2QCFw8WAh8lBTwvQWN0aXZpdHkvY29tbWl0dGVlcy9zdXJ2aXZvcnMvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAhYPZBYOAgEPFgIfJQUcL0FjdGl2aXR5L2NvbW1pdHRlZXMvRm9yZWlnbhYCZg8VATPXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXoteV15HXk9eZ150g15bXqNeZ151kAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTExMTEWAmYPFQEV15DXnNeZ15TXlSDXqNeR15nXkdeVZAILDxYCHyUFPS9BY3Rpdml0eS9jb21taXR0ZWVzL0ZvcmVpZ24vUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUhL0FjdGl2aXR5L2NvbW1pdHRlZXMvRm9yZWlnbi9OZXdzZAIXDxYCHyUFOi9BY3Rpdml0eS9jb21taXR0ZWVzL0ZvcmVpZ24vUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAhcPZBYOAgEPFgIfJQUiL0FjdGl2aXR5L2NvbW1pdHRlZXMvWW91bmdJc3JhZWxpcxYCZg8VATnXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXoteg15nXmdeg15kg15TXptei15nXqNeZ151kAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEh15HXqNeQ16nXldeqINeX15HXqNeqINeU15vXoNeh16ogZAIHDxYCHyUFP2h0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9MTA4MhYCZg8VARPXoNei157XlCDXnNeW15nXnteZZAILDxYCHyUFQy9BY3Rpdml0eS9jb21taXR0ZWVzL1lvdW5nSXNyYWVsaXMvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUnL0FjdGl2aXR5L2NvbW1pdHRlZXMvWW91bmdJc3JhZWxpcy9OZXdzZAIXDxYCHyUFQC9BY3Rpdml0eS9jb21taXR0ZWVzL1lvdW5nSXNyYWVsaXMvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAhgPZBYOAgEPFgIfJQUdL0FjdGl2aXR5L2NvbW1pdHRlZXMvQmFzaWNHb3YWAmYPFQFM15TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec16rXmden15XXoNeZ150g15zXl9eV16cg15nXodeV15M6INeU157Xntep15zXlGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFPmh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9OTc2FgJmDxUBD9eQ15XXpNeZ16gg15vXpWQCCw8WAh8lBT4vQWN0aXZpdHkvY29tbWl0dGVlcy9CYXNpY0dvdi9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSIvQWN0aXZpdHkvY29tbWl0dGVlcy9CYXNpY0dvdi9OZXdzZAIXDxYCHyUFOy9BY3Rpdml0eS9jb21taXR0ZWVzL0Jhc2ljR292L1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIZD2QWDgIBDxYCHyUFHC9BY3Rpdml0eS9jb21taXR0ZWVzL0dhc0Z1bmQWAmYPFQE/15TXldeV16LXk9eUINec16TXmden15XXlyDXotecINeU16fXqNefINec15DXlteo15fXmSDXmdep16jXkNecZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBIdeR16jXkNep15XXqiDXl9eR16jXqiDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTExMDgWAmYPFQEd15zXmdee15XXqCDXodeV158g15TXqCDXntec15pkAgsPFgIfJQU9L0FjdGl2aXR5L2NvbW1pdHRlZXMvR2FzRnVuZC9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSEvQWN0aXZpdHkvY29tbWl0dGVlcy9HYXNGdW5kL05ld3NkAhcPFgIfJQU6L0FjdGl2aXR5L2NvbW1pdHRlZXMvR2FzRnVuZC9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCGg9kFg4CAQ8WAh8lBR4vQWN0aXZpdHkvY29tbWl0dGVlcy9QZXRpdGlvbnMWAmYPFQE115TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec16TXoNeZ15XXqiDXlNem15nXkdeV16hkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwMDEWAmYPFQEe15nXpteX16cg15bXkNeRINek15nXoNeT16jXldehZAILDxYCHyUFPy9BY3Rpdml0eS9jb21taXR0ZWVzL1BldGl0aW9ucy9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSMvQWN0aXZpdHkvY29tbWl0dGVlcy9QZXRpdGlvbnMvTmV3c2QCFw8WAh8lBTwvQWN0aXZpdHkvY29tbWl0dGVlcy9QZXRpdGlvbnMvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAgsPZBYCAgEPFgIfJQVMaHR0cHM6Ly9tYWluLmtuZXNzZXQuZ292LmlsL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGFnZXMvQ29tbWl0dGVlc0NvbnRhY3QuYXNweGQCEg9kFh4CAQ8WAh8DBRPXntep15vXnyDXlNeb16DXodeqZAIDDxYCHwMFHNen16jXmdeZ16og15HXny3XkteV16jXmdeV159kAgUPFgIfAwUX15nXqNeV16nXnNeZ150sIDkxOTUwMTZkAgcPFgQfAwUKMDItNjc1MzMzMx8lBQ50ZWw6MDItNjc1MzMzM2QCCQ8WBB8DBRfXoNeS15nXqdeV16og15HXm9eg16HXqh8lBR8vQWJvdXQvUGFnZXMvQWNjZXNzaWJpbGl0eS5hc3B4ZAILDxYEHwMFJteU15nXl9eZ15PXlCDXnNek16DXmdeV16og15TXpteZ15HXldeoHyUFLS9BYm91dC9EZXBhcnRtZW50cy9QYWdlcy9QdWJsaWNJbnF1aXJpZXMuYXNweGQCDQ8WBB8DBRzXnNem15XXldeqINeQ16rXqCDXlNeb16DXodeqHyUFHm1haWx0bzpmZWVkYmFja0BrbmVzc2V0Lmdvdi5pbGQCDw9kFgICAQ8WBh8DBQ7QoNGD0YHRgdC60LjQuR8lBQMvUlUfKgUCcnVkAhEPZBYCAgEPFgYfAwUO2KfZhNi52LHYqNmK2KkfJQUDL0FSHyoFAmFyZAITD2QWAgIBDxYGHwMFB0VuZ2xpc2gfJQUDL0VOHyoFAmVuZAIVDxYCHyZoFgICAQ8WBh8DBQrXoteR16jXmdeqHyUFAS8fKgUCaGVkAhcPFgIfJAIKFhRmD2QWAmYPFQIbL0Fib3V0L3BhZ2VzL2RpcmVjdG9yeS5hc3B4EdeZ16bXmdeo16og16fXqdeoZAIBD2QWAmYPFQIgL0Fib3V0L1BhZ2VzL09ubGluZVNlcnZpY2VzLmFzcHgZ15jXpNeh15nXnSDXnten15XXldeg15nXnWQCAg9kFgJmDxUCJC9BYm91dC9LbmVzc2V0V29yay9QYWdlcy93YW50ZWQuYXNweCbXk9eo15XXqdeZ150g15XXntep16jXldeqINek16DXldeZ15XXqmQCAw9kFgJmDxUCKC9BYm91dC9LbmVzc2V0V29yay9QYWdlcy9FeGVtcHRpb25zLmFzcHgm157Xm9eo15bXmSDXqNeb16kg15XXlNeq16fXqdeo15XXmdeV16pkAgQPZBYCZg8VAjAvQWJvdXQvS25lc3NldFdvcmsvUGFnZXMvV29ya0FuZFJlY2Vzc0RhdGVzLmFzcHgg157Xldei15PXmSDXoteR15XXk9eqINeU15vXoNeh16pkAgUPZBYCZg8VAiMvQWJvdXQvTG9iYnlpc3QvUGFnZXMvTG9iYnlpc3QuYXNweBfXqdeT15zXoNeZ150g15HXm9eg16HXqmQCBg9kFgJmDxUCGy9BYm91dC9QYWdlcy9Db3B5cmlnaHQuYXNweBnXlteb15XXmdeV16og15nXldem16jXmdedZAIHD2QWAmYPFQIaL0Fib3V0L1BhZ2VzL1dlYlN0YWZmLmFzcHgT15nXldem16jXmSDXlNeQ16rXqGQCCA9kFgJmDxUCHi9BYm91dC9QYWdlcy9BY2NTdGF0ZW1lbnQuYXNweCnXlNem15TXqNeqINeg15LXmdep15XXqiDXkNeq16gg15TXm9eg16HXqmQCCQ9kFgJmDxUCKy9hYm91dC9idWlsZGluZy9kb2N1bWVudHMvZGVmaWJyaWxsYXRvci5wZGYf15PXpNeZ15HXqNeZ15zXmNeV16gg15HXm9eg16HXqmQCGQ8WAh8DBRnXktec16jXmdeZ16og16rXnteV16DXldeqZAIbDxYCHwMF8SU8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxMDAwJyBkYXRhLWg9JzE1MDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR185MzI3LkpQRyc+PGltZyAgYWx0PSfXnteR15XXkNeqINeU15vXoNeh16og15zXldeR16nXqiDXl9eSJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR185MzI3LkpQRycgaWQ9JzknID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR181NDk1LkpQRyc+PGltZyAgYWx0PSfXntep15vXnyDXlNeb16DXodeqINeR15LXkdei16og16jXnScgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfNTQ5NS5KUEcnIGlkPSc2JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPSc5OTYnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18xNDAwNjcwMjIuanBnJz48aW1nICBhbHQ9J9eX15bXmdeqINeU15vXoNeh16og15XXlNee16DXldeo15Qg16nXnteV15wg15TXm9eg15nXodeUINec157Xqdeb158sINek16jXmSDXmdem15nXqNeq15Ug16nXnCDXkdeg15Ug15DXnNen158nIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzE0MDA2NzAyMi5qcGcnIGlkPScxMycgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzEwMDAnIGRhdGEtaD0nMTUwMCc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE3NzAuSlBHJz48aW1nICBhbHQ9J9eU16LXqtenINep15wg157XkteZ15zXqiDXlNei16bXnteQ15XXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTc3MC5KUEcnIGlkPScyJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDgxJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjY5NzUwNDcxLmpwZyc+PGltZyAgYWx0PSfXkNeV15zXnSDXqdeQ15LXkNecLiDXpNeh15nXpNehINeU16fXmdeoINeR16LXmdem15XXkdeV15Ug16nXnCDXlNeQ15XXntefJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18yNjk3NTA0NzEuanBnJyBpZD0nMTYnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNjYyLkpQRyc+PGltZyAgYWx0PSfXp9eV157XqiDXlNee157Xqdec15Q6INeq16LXqNeV15vXqiDXpteZ15zXldee15kg16jXkNep15kg157Xntep15zXldeqINeZ16nXqNeQ15wnIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE2NjIuSlBHJyBpZD0nMTgnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR180NTU5LkpQRyc+PGltZyAgYWx0PSfXlNeS158g15TXkNeo15vXmdeQ15XXnNeV15LXmSDXkdeb16DXodeqJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR180NTU5LkpQRycgaWQ9JzUnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR185MjUxLkpQRyc+PGltZyAgYWx0PSfXp9eV157XqiDXlNee157Xqdec15QnIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzkyNTEuSlBHJyBpZD0nOCcgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzE1MDAnIGRhdGEtaD0nMTAwMCc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzU3NTIuSlBHJz48aW1nICBhbHQ9J9eU15vXoNeZ16HXlCDXnNee15HXldeQ16og15zXqdeb16og15nXldep15Et16jXkNepINeU15vXoNeh16onIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzU3NTIuSlBHJyBpZD0nNycgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzE1MDAnIGRhdGEtaD0nMTAwMCc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE2MTkuSlBHJz48aW1nICBhbHQ9J9eU15vXoNeZ16HXlCDXnNeb16DXodeqINee15DXktejINeU15XXldei15PXldeqJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNjE5LkpQRycgaWQ9JzE3JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTAwMCcgZGF0YS1oPScxNTAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTY5OS5KUEcnPjxpbWcgIGFsdD0n15PXldeb158g15TXoNeV15DXnteZ150g15HXkNeV15zXnSDXlNee15zXmdeQ15QnIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE2OTkuSlBHJyBpZD0nMjAnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxMDAwJyBkYXRhLWg9JzE1MDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNzU5LkpQRyc+PGltZyAgYWx0PSfXkNeV15zXnSDXqdeQ15LXkNecLiDXpNeo15gg157XqdeY15nXlyDXlNen15nXqCDXlNeQ157Xptei15kg15HXoteZ16bXldeR15Ug16nXnCDXlNeQ15XXntefJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNzU5LkpQRycgaWQ9JzIxJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTY2Ny5KUEcnPjxpbWcgIGFsdD0n15DXldec150g157XnNeZ15DXqiDXlNeb16DXodeqJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNjY3LkpQRycgaWQ9JzE5JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjIwMzk5MzkuanBnJz48aW1nICBhbHQ9J9eQ15XXnNedINee15zXmdeQ16og15TXm9eg16HXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjIwMzk5MzkuanBnJyBpZD0nMTAnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18zNzgzLkpQRyc+PGltZyAgYWx0PSfXntep157XqCDXlNeb16DXodeqINeR157XqdeZ157XlCDXmNen16HXmdeqJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18zNzgzLkpQRycgaWQ9JzQnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzExMDQnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18xNDExMjA0NzguanBnJz48aW1nICBhbHQ9J9eU157XoNeV16jXlCwg16TXqNeZINeZ16bXmdeo16rXlSDXqdecINeR16DXlSDXkNec16fXnywg15TXnteV16bXkdeqINee15XXnCDXlNeb16DXmdeh15Qg15zXntep15vXnyDXlNeb16DXodeqJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18xNDExMjA0NzguanBnJyBpZD0nMTQnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxMDAwJyBkYXRhLWg9JzE1MDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18yMDY4LkpQRyc+PGltZyAgYWx0PSfXnteV15wg15TXm9eg15nXodeUINec157Xqdeb158g15TXm9eg16HXqjog16TXodecINeU157XoNeV16jXlCDXpNeo15kg15nXpteZ16jXqteVINep15wg15HXoNeVINeQ15zXp9efJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18yMDY4LkpQRycgaWQ9JzMnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18yMjI4MDgyMS5qcGcnPjxpbWcgIGFsdD0n157Xqdeb158g15TXm9eg16HXqi4g15TXkdeg15nXmdefINeU157Xp9eV16jXmSDXldeQ15LXoyDXlNeV15XXoteT15XXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjIyODA4MjEuanBnJyBpZD0nMTEnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18yMjYxODUzMS5qcGcnPjxpbWcgIGFsdD0n157Xqdeb158g15TXm9eg16HXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjI2MTg1MzEuanBnJyBpZD0nMTInID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxMDAwJyBkYXRhLWg9JzE1MDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNzY0LkpQRyc+PGltZyAgYWx0PSfXkNeV15zXnSDXqdeQ15LXkNecLiDXpNeo15gg157XqdeY15nXlyDXlNen15nXqCDXlNeQ157Xptei15kg15HXoteZ16bXldeR15Ug16nXnCDXlNeQ15XXntefJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNzY0LkpQRycgaWQ9JzEnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9Jzk4Nic+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzI2OTc0MjgzMy5qcGcnPjxpbWcgIGFsdD0n15DXktejINeV16LXk9eV16og15TXm9eg16HXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjY5NzQyODMzLmpwZycgaWQ9JzE1JyA+PC9hPjwvZGl2Pg0KZAIdDxYCHwMFxAEyMDIzLCDXm9ecINeU15bXm9eV15nXldeqINep157Xldeo15XXqiDXnNee15PXmdeg16og15nXqdeo15DXnCAtINeU15vXoNeh16og15DXlSDXnNem15PXk9eZ150g16nXnNeZ16nXmdeZ150sINeb157XpNeV16jXmCA8YSBocmVmPS9BYm91dC9QYWdlcy9Db3B5cmlnaHQuYXNweCB0aXRsZT0n15HXp9eZ16nXldeoJz7Xkden15nXqdeV16g8L2E+ZBgEBR5fX0NvbnRyb2xzUmVxdWlyZVBvc3RCYWNrS2V5X18WCwU9Y3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkZHRGcm9tRGF0ZQVGY3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkZHRGcm9tRGF0ZSRjYWxlbmRhcgVGY3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkZHRGcm9tRGF0ZSRjYWxlbmRhcgU7Y3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkZHRUb0RhdGUFRGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGR0VG9EYXRlJGNhbGVuZGFyBURjdGwwMCRjdGw2MiRnXzJiMjdkNGUyX2Y2ODVfNDk4ZV85Njc5XzkwODJiMTlhYWJjZiRkdFRvRGF0ZSRjYWxlbmRhcgVAY3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkY21iVGltZVBlcmlvZAU9Y3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkY21iS25lc3NldAVAY3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkcmNiQ29tbWl0dGVlcwU8Y3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkYnRuU2VhcmNoBTtjdGwwMCRjdGw2MiRnXzJiMjdkNGUyX2Y2ODVfNDk4ZV85Njc5XzkwODJiMTlhYWJjZiRidG5DbGVhcgVAY3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkcmNiQ29tbWl0dGVlcw8UKwACBRPXm9ecINeU15XXldei15PXldeqBQEwZAU9Y3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkY21iS25lc3NldA8UKwACBRjXm9eg16HXqiDXlNep16kt16LXqdeo15QFGDE3LzAyLzIwMDMjMTcvMDQvMjAwNnwxNmQFQGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGNtYlRpbWVQZXJpb2QPFCsAAmVlZDd9p6M0bfHpeugRx8CIzcX825xjYcLDjgilVb2Q6q8R',
            '/wEdAAyLOlndlTlqjpfaTv6kh0j5btRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGtmU3ChoXAKrmIq3IldP/lXkxcpmAZIyTLuY4tA+UFLNw=='],
        'כנסת החמש-עשרה': [
            '/wEPDwUBMA9kFgJmD2QWAgIBD2QWBAIBD2QWBgIHD2QWAmYPZBYCAgEPFgIeE1ByZXZpb3VzQ29udHJvbE1vZGULKYgBTWljcm9zb2Z0LlNoYXJlUG9pbnQuV2ViQ29udHJvbHMuU1BDb250cm9sTW9kZSwgTWljcm9zb2Z0LlNoYXJlUG9pbnQsIFZlcnNpb249MTYuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49NzFlOWJjZTExMWU5NDI5YwFkAjEPZBYCAgMPZBYCZg9kFgJmDzwrAAYAZAIzD2QWAgIBD2QWAgUmZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YPDxYEHghMYXN0UGFnZQLhAh4LQ3VycmVudFBhZ2UCAWQWAgICD2QWJAIBDxYCHglpbm5lcmh0bWwFQNeX15nXpNeV16kg15HXpNeo15XXmNeV16fXldec15nXnSDXqdecINeT15nXldeg15kg15TXldeV16LXk9eV16pkAgMPDxYMHhxFbmFibGVFbWJlZGRlZEJhc2VTdHlsZXNoZWV0Zx4VRW5hYmxlRW1iZWRkZWRTY3JpcHRzZx4HTWF4RGF0ZQYAQHFvsT4xCR4MU2VsZWN0ZWREYXRlBgBA+NGPfsAIHgdNaW5EYXRlBgBAVyBTBVEIHhJSZXNvbHZlZFJlbmRlck1vZGULKXJUZWxlcmlrLldlYi5VSS5SZW5kZXJNb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDIyLjIuNjIyLjQwLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQBZBYEZg8UKwAIDxYWHwVnHgRUZXh0BRMxOTk5LTA2LTA3LTAwLTAwLTAwHhFFbmFibGVBcmlhU3VwcG9ydGgeDUxhYmVsQ3NzQ2xhc3MFB3JpTGFiZWweBFNraW4FB0RlZmF1bHQfBGceDEVtcHR5TWVzc2FnZQUM157XqteQ16jXmdeaHwgGAEBXIFMFUQgeEV9za2lwTU1WYWxpZGF0aW9uaB8JCysFAR8GBgBAcW+xPjEJZBYKHglGb3JlQ29sb3IKIx4FV2lkdGgbAAAAAAAAWUAHAAAAHgpSZXNpemVNb2RlCylyVGVsZXJpay5XZWIuVUkuUmVzaXplTW9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0AB4IQ3NzQ2xhc3MFEXJpVGV4dEJveCByaUhvdmVyHgRfIVNCAoYCFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFEXJpVGV4dEJveCByaUVycm9yHxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwUTcmlUZXh0Qm94IHJpRm9jdXNlZB8UAoYCFggfEAojHxEbAAAAAAAAWUAHAAAAHxMFE3JpVGV4dEJveCByaUVuYWJsZWQfFAKGAhYKHxAKIx8RGwAAAAAAAFlABwAAAB8SCysGAB8TBRRyaVRleHRCb3ggcmlEaXNhYmxlZB8UAoYCFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFEXJpVGV4dEJveCByaUVtcHR5HxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwUQcmlUZXh0Qm94IHJpUmVhZB8UAoYCZAICDxQrAA0PFhoFD1JlbmRlckludmlzaWJsZWcFCUN1bHR1cmVJRAKNCAUNU2VsZWN0ZWREYXRlcw8FjwFUZWxlcmlrLldlYi5VSS5DYWxlbmRhci5Db2xsZWN0aW9ucy5EYXRlVGltZUNvbGxlY3Rpb24sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjIuMi42MjIuNDAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBQrAAAFEUVuYWJsZU11bHRpU2VsZWN0aAUETWluRAYAQFcgUwVRCAUERm9jRAYAQCqK6C/bCAUNQ3VsdHVyZU5hbWVJRAUFaGUtSUwFA0VSU2gFCUNlbGxBbGlnbgsqKVN5c3RlbS5XZWIuVUkuV2ViQ29udHJvbHMuSG9yaXpvbnRhbEFsaWduAgUNQ3VsdHVyZUluZm9JRCgpbVN5c3RlbS5HbG9iYWxpemF0aW9uLkN1bHR1cmVJbmZvLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFaGUtSUwFC1NwZWNpYWxEYXlzDwWSAVRlbGVyaWsuV2ViLlVJLkNhbGVuZGFyLkNvbGxlY3Rpb25zLkNhbGVuZGFyRGF5Q29sbGVjdGlvbiwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAAUETWF4RAYAgAdF6D0xCQUTU2hvd090aGVyTW9udGhzRGF5c2gPFgofC2gfBWcfDQUHRGVmYXVsdB8EZx8JCysFAWRkFgQfEwULcmNNYWluVGFibGUfFAICFgQfEwUMcmNPdGhlck1vbnRoHxQCAmQWBB8TBQpyY1NlbGVjdGVkHxQCAmQWBB8TBQpyY0Rpc2FibGVkHxQCAhYEHxMFDHJjT3V0T2ZSYW5nZR8UAgIWBB8TBQlyY1dlZWtlbmQfFAICFgQfEwUHcmNIb3Zlch8UAgIWBB8TBTFSYWRDYWxlbmRhck1vbnRoVmlldyBSYWRDYWxlbmRhck1vbnRoVmlld19EZWZhdWx0HxQCAhYEHxMFCXJjVmlld1NlbB8UAgJkAgUPDxYMHwRnHwVnHwYGAEBxb7E+MQkfBwYAgAymLqTECB8IBgBAVyBTBVEIHwkLKwUBZBYEZg8UKwAIDxYWHwVnHwoFEzIwMDMtMDItMTctMDAtMDAtMDAfC2gfDAUHcmlMYWJlbB8NBQdEZWZhdWx0HwRnHw4FD9ei15Mg16rXkNeo15nXmh8IBgBAVyBTBVEIHw9oHwkLKwUBHwYGAEBxb7E+MQlkFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFEXJpVGV4dEJveCByaUhvdmVyHxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwURcmlUZXh0Qm94IHJpRXJyb3IfFAKGAhYKHxAKIx8RGwAAAAAAAFlABwAAAB8SCysGAB8TBRNyaVRleHRCb3ggcmlGb2N1c2VkHxQChgIWCB8QCiMfERsAAAAAAABZQAcAAAAfEwUTcmlUZXh0Qm94IHJpRW5hYmxlZB8UAoYCFgofEAojHxEbAAAAAAAAWUAHAAAAHxILKwYAHxMFFHJpVGV4dEJveCByaURpc2FibGVkHxQChgIWCh8QCiMfERsAAAAAAABZQAcAAAAfEgsrBgAfEwURcmlUZXh0Qm94IHJpRW1wdHkfFAKGAhYKHxAKIx8RGwAAAAAAAFlABwAAAB8SCysGAB8TBRByaVRleHRCb3ggcmlSZWFkHxQChgJkAgIPFCsADQ8WGgUPUmVuZGVySW52aXNpYmxlZwUJQ3VsdHVyZUlEAo0IBQ1TZWxlY3RlZERhdGVzDwWPAVRlbGVyaWsuV2ViLlVJLkNhbGVuZGFyLkNvbGxlY3Rpb25zLkRhdGVUaW1lQ29sbGVjdGlvbiwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAyMi4yLjYyMi40MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAAURRW5hYmxlTXVsdGlTZWxlY3RoBQRNaW5EBgBAVyBTBVEIBQRGb2NEBgBAKoroL9sIBQ1DdWx0dXJlTmFtZUlEBQVoZS1JTAUDRVJTaAUJQ2VsbEFsaWduCysHAgUNQ3VsdHVyZUluZm9JRCgrCAVoZS1JTAULU3BlY2lhbERheXMPBZIBVGVsZXJpay5XZWIuVUkuQ2FsZW5kYXIuQ29sbGVjdGlvbnMuQ2FsZW5kYXJEYXlDb2xsZWN0aW9uLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDIyLjIuNjIyLjQwLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwAABQRNYXhEBgCAB0XoPTEJBRNTaG93T3RoZXJNb250aHNEYXlzaA8WCh8LaB8FZx8NBQdEZWZhdWx0HwRnHwkLKwUBZGQWBB8TBQtyY01haW5UYWJsZR8UAgIWBB8TBQxyY090aGVyTW9udGgfFAICZBYEHxMFCnJjU2VsZWN0ZWQfFAICZBYEHxMFCnJjRGlzYWJsZWQfFAICFgQfEwUMcmNPdXRPZlJhbmdlHxQCAhYEHxMFCXJjV2Vla2VuZB8UAgIWBB8TBQdyY0hvdmVyHxQCAhYEHxMFMVJhZENhbGVuZGFyTW9udGhWaWV3IFJhZENhbGVuZGFyTW9udGhWaWV3X0RlZmF1bHQf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FWcfCQsrBQEfBWdkDxQrABMUKwACDxYGHwoFE9eb15wg15TXldeV16LXk9eV16ofGAUBMB8ZZ2RkFCsAAg8WBh8KBRPXldei15PXqiDXlNeb16DXodeqHxgFATEfGWhkZBQrAAIPFgYfCgUV15XXoteT16og15TXm9eh16TXmdedHxgFATIfGWhkZBQrAAIPFgYfCgUV15XXoteT16og15TXm9ec15vXnNeUHxgFATMfGWhkZBQrAAIPFgYfCgUi15XXoteT16og15TXl9eV16Ug15XXlNeR15nXmNeX15XXnx8YBQE0HxloZGQUKwACDxYGHwoFK9eV16LXk9eqINeU16TXoNeZ150g15XXlNeS16DXqiDXlNeh15HXmdeR15QfGAUBNR8ZaGRkFCsAAg8WBh8KBSbXldei15PXqiDXlNeX15XXp9eULCDXl9eV16cg15XXntep16TXmB8YBQE2HxloZGQUKwACDxYGHwoFNNeV16LXk9eqINeU16LXnNeZ15nXlCwg15TXp9ec15nXmNeUINeV15TXqtek15XXpteV16ofGAUCMjcfGWhkZBQrAAIPFgYfCgUy15XXoteT16og15TXl9eZ16DXldeaLCDXlNeq16jXkdeV16og15XXlNeh16TXldeo15gfGAUBOB8ZaGRkFCsAAg8WBh8KBSTXldei15PXqiDXlNei15HXldeT15Qg15XXlNeo15XXldeX15QfGAUCMjgfGWhkZBQrAAIPFgYfCgU115TXldeV16LXk9eUINec16LXoNeZ15nXoNeZINeR15nXp9eV16jXqiDXlNee15PXmdeg15QfGAUCMTAfGWhkZBQrAAIPFgYfCgVJ15TXldeV16LXk9eUINec16fXmdeT15XXnSDXntei157XkyDXlNeQ15nXqdeUINeV15zXqdeV15XXmdeV158g157XkteT16jXmR8YBQIxMR8ZaGRkFCsAAg8WBh8KBSrXldei15PXqiAg15TXnteT16IgINeV15TXmNeb16DXldec15XXkteZ15QfGAUCMTMfGWhkZBQrAAIPFgYfCgUV15XXoteT16og15TXkNeq15nXp9eUHxgFAjE0HxloZGQUKwACDxYGHwoFUdeU15XXldei15PXlCDXlNee15nXldeX15PXqiDXnNee15DXkdenINeR16nXmdee15XXqSDXkdeh157XmdedINeV15HXkNec15vXldeU15XXnB8YBQIxMh8ZaGRkFCsAAg8WBh8KBTPXlNeV15XXoteT15Qg15TXnteZ15XXl9eT16og15zXlteb15XXmdeV16og15TXmdec15MfGAUCMjUfGWhkZBQrAAIPFgYfCgUz15TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec16LXldeR15PXmdedINeW16jXmdedHxgFAjE1HxloZGQUKwACDxYGHwoFNdeU15XXldei15PXlCDXlNee15nXldeX15PXqiDXnNek16DXmdeV16og15TXpteZ15HXldeoHxgFAjE5HxloZGQUKwACDxYGHwoFhgHXlNeV15XXoteT15Qg15TXntep15XXqtek16og15zXldei15PXqiDXlNeX15XXpSDXldeU15HXmdeY15fXldefINeV15XXoteT16og15TXl9eV16fXlCDXl9eV16cg15XXntep16TXmCDXnNei16DXmdeZ158g15fXldenINeU16nXkSLXmx8YBQM3NzcfGWhkZA8UKwETZmZmZmZmZmZmZmZmZmZmZmZmZhYBBXdUZWxlcmlrLldlYi5VSS5SYWRDb21ib0JveEl0ZW0sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMjIuMi42MjIuNDAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBYqZg8PFgQfEwUJcmNiSGVhZGVyHxQCAmRkAgEPDxYEHxMFCXJjYkZvb3Rlch8UAgJkZAICDw8WBh8KBRPXm9ecINeU15XXldei15PXldeqHxgFATAfGWdkZAIDDw8WBh8KBRPXldei15PXqiDXlNeb16DXodeqHxgFATEfGWhkZAIEDw8WBh8KBRXXldei15PXqiDXlNeb16HXpNeZ150fGAUBMh8ZaGRkAgUPDxYGHwoFFdeV16LXk9eqINeU15vXnNeb15zXlB8YBQEzHxloZGQCBg8PFgYfCgUi15XXoteT16og15TXl9eV16Ug15XXlNeR15nXmNeX15XXnx8YBQE0HxloZGQCBw8PFgYfCgUr15XXoteT16og15TXpNeg15nXnSDXldeU15LXoNeqINeU16HXkdeZ15HXlB8YBQE1HxloZGQCCA8PFgYfCgUm15XXoteT16og15TXl9eV16fXlCwg15fXldenINeV157Xqdek15gfGAUBNh8ZaGRkAgkPDxYGHwoFNNeV16LXk9eqINeU16LXnNeZ15nXlCwg15TXp9ec15nXmNeUINeV15TXqtek15XXpteV16ofGAUCMjcfGWhkZAIKDw8WBh8KBTLXldei15PXqiDXlNeX15nXoNeV15osINeU16rXqNeR15XXqiDXldeU16HXpNeV16jXmB8YBQE4HxloZGQCCw8PFgYfCgUk15XXoteT16og15TXoteR15XXk9eUINeV15TXqNeV15XXl9eUHxgFAjI4HxloZGQCDA8PFgYfCgU115TXldeV16LXk9eUINec16LXoNeZ15nXoNeZINeR15nXp9eV16jXqiDXlNee15PXmdeg15QfGAUCMTAfGWhkZAINDw8WBh8KBUnXlNeV15XXoteT15Qg15zXp9eZ15PXldedINee16LXnteTINeU15DXmdep15Qg15XXnNep15XXldeZ15XXnyDXnteS15PXqNeZHxgFAjExHxloZGQCDg8PFgYfCgUq15XXoteT16ogINeU157Xk9eiICDXldeU15jXm9eg15XXnNeV15LXmdeUHxgFAjEzHxloZGQCDw8PFgYfCgUV15XXoteT16og15TXkNeq15nXp9eUHxgFAjE0HxloZGQCEA8PFgYfCgVR15TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec157XkNeR16cg15HXqdeZ157XldepINeR16HXnteZ150g15XXkdeQ15zXm9eV15TXldecHxgFAjEyHxloZGQCEQ8PFgYfCgUz15TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec15bXm9eV15nXldeqINeU15nXnNeTHxgFAjI1HxloZGQCEg8PFgYfCgUz15TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec16LXldeR15PXmdedINeW16jXmdedHxgFAjE1HxloZGQCEw8PFgYfCgU115TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec16TXoNeZ15XXqiDXlNem15nXkdeV16gfGAUCMTkfGWhkZAIUDw8WBh8KBYYB15TXldeV16LXk9eUINeU157XqdeV16rXpNeqINec15XXoteT16og15TXl9eV16Ug15XXlNeR15nXmNeX15XXnyDXldeV16LXk9eqINeU15fXlden15Qg15fXldenINeV157Xqdek15gg15zXoteg15nXmdefINeX15XXpyDXlNep15Ei15sfGAUDNzc3HxloZGQCFw8PFgIfCmVkZAIZDxYCHgVzdHlsZQUNZGlzcGxheTpncmlkO2QCHQ8PFgQfBWcfBGdkZAIfDzwrAAUBAA8WHB8YZR4MQXV0b1Bvc3RCYWNrZx4GVGFyZ2V0ZR8EZx4PQ29tbWFuZEFyZ3VtZW50ZR4HUHJpbWFyeWgeC0NvbW1hbmROYW1lZR4HQ2hlY2tlZGgeD1ZhbGlkYXRpb25Hcm91cAUMdmdOZXdzU2VhcmNoHgtOYXZpZ2F0ZVVybGUeCFJlYWRPbmx5aB8JCysFAR8FZx8KBQrXl9eZ16TXldepZGQCIQ88KwAFAQAPFhwfGGUfG2cfHGUfBGcfHWUfHmgfH2UfIGgfIWQfImUfI2gfCQsrBQEfBWcfCgUK16DXmden15XXmWRkAiMPFgIfGgUNZGlzcGxheTpncmlkOxYCAgEPFgIeC18hSXRlbUNvdW50AhQWKGYPZBYQAgMPFgIeBGhyZWYFHC9BY3Rpdml0eS9jb21taXR0ZWVzL0ZpbmFuY2UWAgIBDw8WAh8KBRXXldei15PXqiDXlNeb16HXpNeZ151kZAIFDxYCHyUFOmh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE3L0NvbW1pdHRlZXMvMTdfcHR2XzEzMTc2MS5kb2NkAgYPFQEAZAIHDxYCHyUFOmh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE3L0NvbW1pdHRlZXMvMTdfcHR2XzEzMTc2MS5kb2MWAgIBDw8WAh8KBRzXkdeX15nXqNeqINeZ15Ui16gg15XXoteT15QgZGQCCQ8PFgIfCgVAMTcg15HXkNek16jXmdecIDIwMDYsINeZIteYINeR16DXmdeh158g16rXqdehIteVLCDXkdep16LXlCAxODo1NGRkAgsPDxYCHgdWaXNpYmxlaGQWAmYPFQEAZAIMDxUBAGQCDQ8WAh8lBUcvQWN0aXZpdHkvY29tbWl0dGVlcy9QYWdlcy9BbGxDb21taXR0ZWVzQWdlbmRhLmFzcHg/VGFiPTMmSXRlbUlEPTEzMDIwM2QCAQ9kFhACAw8WAh8lBRwvQWN0aXZpdHkvY29tbWl0dGVlcy9rbmVzc2V0FgICAQ8PFgIfCgUT15XXoteT16og15TXm9eg16HXqmRkAgUPZBYCAgEPDxYCHyZoZGQCBg8VAQBkAgcPFgIfGgUhY3Vyc29yOmF1dG87dGV4dC1kZWNvcmF0aW9uOm5vbmU7FgICAQ8PFgIfCgXXATEuINeQ15nXqdeV16gg15TXqNeb15Eg15XXoteT15XXqiDXltee16DXmdeV16og15zXm9eg16HXqiDXlNep15HXoi3Xotep16jXlCAyLiDXkNeZ16nXldeoINee15nXoNeV15kg16nXoNeZINeh15LXoNeZ150g15bXnteg15nXmdedINec15nXldep15Eg16jXkNepINeU15vXoNeh16og15HXpNeV16LXnCAzLiDXntee15zXkCDXnten15XXnSDXnNeZ15Ui16gg15TXm9eg16HXqiAgZGQCCQ8PFgIfCgVAMTcg15HXkNek16jXmdecIDIwMDYsINeZIteYINeR16DXmdeh158g16rXqdehIteVLCDXkdep16LXlCAxODowMGRkAgsPZBYCZg8VASTXlNek16jXldeY15XXp9eV15wg15jXqNedINek15XXqNeh151kAgwPFQEAZAINDxYCHyUFRy9BY3Rpdml0eS9jb21taXR0ZWVzL1BhZ2VzL0FsbENvbW1pdHRlZXNBZ2VuZGEuYXNweD9UYWI9MyZJdGVtSUQ9MTMwMjIxZAICD2QWEAIDDxYCHyUFHC9BY3Rpdml0eS9jb21taXR0ZWVzL2tuZXNzZXQWAgIBDw8WAh8KBRPXldei15PXqiDXlNeb16DXodeqZGQCBQ9kFgICAQ8PFgIfJmhkZAIGDxUBAGQCBw8WAh8aBSFjdXJzb3I6YXV0bzt0ZXh0LWRlY29yYXRpb246bm9uZTsWAgIBDw8WAh8KBasBMS4g16HXk9eoINeU15nXqdeZ15HXlCDXkdee15zXmdeQ15QgMi4g15fXnNeV16fXqiDXl9eT16jXmdedINec16HXmdei15XXqiAzLiDXl9ec15XXp9eqINeX15PXqNeZ150g15zXl9eR16jXmSDXlNeb16DXodeqINec16TXmSDXntek16rXlyDXodeZ16LXqteZIDQuINek15LXqNeqINeU15vXoNeh16ogZGQCCQ8PFgIfCgVAMTAg15HXkNek16jXmdecIDIwMDYsINeZIteRINeR16DXmdeh158g16rXqdehIteVLCDXkdep16LXlCAxMTowMGRkAgsPZBYCZg8VASTXlNek16jXldeY15XXp9eV15wg15jXqNedINek15XXqNeh151kAgwPFQEAZAINDxYCHyUFRy9BY3Rpdml0eS9jb21taXR0ZWVzL1BhZ2VzL0FsbENvbW1pdHRlZXNBZ2VuZGEuYXNweD9UYWI9MyZJdGVtSUQ9MTMwMTgzZAIDD2QWEAIDDxYCHyUFHC9BY3Rpdml0eS9jb21taXR0ZWVzL2tuZXNzZXQWAgIBDw8WAh8KBRPXldei15PXqiDXlNeb16DXodeqZGQCBQ9kFgICAQ8PFgIfJmhkZAIGDxUBAGQCBw8WAh8aBSFjdXJzb3I6YXV0bzt0ZXh0LWRlY29yYXRpb246bm9uZTsWAgIBDw8WAh8KBZQBMS4g16HXk9eoINeU15nXqdeZ15HXlCDXkdee15zXmdeQ15QgMi4g15fXnNeV16fXqiDXl9eT16jXmdedINec16HXmdei15XXqiAzLiDXl9ec15XXp9eqINeX15PXqNeZ150g15zXl9eR16jXmSDXlNeb16DXodeqINec16TXmSDXntek16rXlyDXodeZ16LXqteZIGRkAgkPDxYCHwoFQDEwINeR15DXpNeo15nXnCAyMDA2LCDXmSLXkSDXkdeg15nXodefINeq16nXoSLXlSwg15HXqdei15QgMDk6MzBkZAILD2QWAmYPFQEk15TXpNeo15XXmNeV16fXldecINeY16jXnSDXpNeV16jXodedZAIMDxUBAGQCDQ8WAh8lBUcvQWN0aXZpdHkvY29tbWl0dGVlcy9QYWdlcy9BbGxDb21taXR0ZWVzQWdlbmRhLmFzcHg/VGFiPTMmSXRlbUlEPTEzMDIwMGQCBA9kFhACAw8WAh8lBRwvQWN0aXZpdHkvY29tbWl0dGVlcy9rbmVzc2V0FgICAQ8PFgIfCgUT15XXoteT16og15TXm9eg16HXqmRkAgUPZBYCAgEPDxYCHyZoZGQCBg8VAQBkAgcPFgIfGgUhY3Vyc29yOmF1dG87dGV4dC1kZWNvcmF0aW9uOm5vbmU7FgICAQ8PFgIfCgWUATEuINeh15PXqCDXlNeZ16nXmdeR15Qg15HXntec15nXkNeUIDIuINeX15zXlden16og15fXk9eo15nXnSDXnNeh15nXoteV16ogMy4g15fXnNeV16fXqiDXl9eT16jXmdedINec15fXkdeo15kg15TXm9eg16HXqiDXnNek15kg157XpNeq15cg16HXmdei16rXmSBkZAIJDw8WAh8KBT01INeR15DXpNeo15nXnCAyMDA2LCDXlicg15HXoNeZ16HXnyDXqtep16Ei15UsINeR16nXoteUIDEzOjAwZGQCCw9kFgJmDxUBJNeU16TXqNeV15jXlden15XXnCDXmNeo150g16TXldeo16HXnWQCDA8VAQBkAg0PFgIfJQVHL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGFnZXMvQWxsQ29tbWl0dGVlc0FnZW5kYS5hc3B4P1RhYj0zJkl0ZW1JRD0xMzAxOThkAgUPZBYQAgMPFgIfJQUcL0FjdGl2aXR5L2NvbW1pdHRlZXMva25lc3NldBYCAgEPDxYCHwoFE9eV16LXk9eqINeU15vXoNeh16pkZAIFD2QWAgIBDw8WAh8maGRkAgYPFQEAZAIHDxYCHxoFIWN1cnNvcjphdXRvO3RleHQtZGVjb3JhdGlvbjpub25lOxYCAgEPDxYCHwoFzAExLiDXkdeX15nXqNeqINeZ15XXqdeRINeo15DXqSDXnNeV16LXk9eUINeU157XodeT16jXqiDXlNeW157XoNeZ16ogMi4g15HXl9eZ16jXqiDXldei15PXqiDXntep16DXlCDXnNei16DXmdeZ16DXmSDXk9eZ15XXqCAzLiDXm9eZ16DXldehINeU15vXoNeh16og15TXqdeR16It16LXqdeo15QgNC4g15HXl9eZ16jXqiDXldei15PXldeqINeW157XoNeZ15XXqiBkZAIJDw8WAh8KBT01INeR15DXpNeo15nXnCAyMDA2LCDXlicg15HXoNeZ16HXnyDXqtep16Ei15UsINeR16nXoteUIDExOjAwZGQCCw9kFgJmDxUBJNeU16TXqNeV15jXlden15XXnCDXmNeo150g16TXldeo16HXnWQCDA8VAQBkAg0PFgIfJQVHL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGFnZXMvQWxsQ29tbWl0dGVlc0FnZW5k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L2NvbW1pdHRlZXMvRWNvbm9taWNzFgICAQ8PFgIfCgUV15XXoteT16og15TXm9ec15vXnNeUZGQCBQ8WAh8lBTlodHRwczovL2ZzLmtuZXNzZXQuZ292LmlsLy8xNi9Db21taXR0ZWVzLzE2X3B0dl83MTc4Mi5kb2NkAgYPFQEAZAIHDxYCHyUFOWh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE2L0NvbW1pdHRlZXMvMTZfcHR2XzcxNzgyLmRvYxYCAgEPDxYCHwoFngHXqten16DXldeqINee15XXotem16og15TXptee15fXmdedICjXmdeZ16bXldeoINeV16nXmdeV15XXpykgKNeT16jXm9eZINee15nXoNeV15kg15fXkdeo15kg15TXnteV16LXpteUINeV15fXkdeo15kg15XXoteT15XXqiDXoteg16TXmdeV16opLCDXlNeq16nXoSLXlS0yMDA2IGRkAgkPDxYCHwoFOjIxINeR157XqNehIDIwMDYsINebIteQINeR15DXk9eoINeq16nXoSLXlSwg15HXqdei15QgMTM6MzBkZAILDw8WAh8maGQWAmYPFQEAZAIMDxUBAGQCDQ8WAh8lBUcvQWN0aXZpdHkvY29tbWl0dGVlcy9QYWdlcy9BbGxDb21taXR0ZWVzQWdlbmRhLmFzcHg/VGFiPTMmSXRlbUlEPTEyOTQ1MWQCCg9kFhACAw8WAh8lBR4vQWN0aXZpdHkvY29tbWl0dGVlcy9FY29ub21pY3MWAgIBDw8WAh8KBRXXldei15PXqiDXlNeb15zXm9ec15RkZAIFDxYCHyUFOWh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE2L0NvbW1pdHRlZXMvMTZfcHR2XzcxNzgxLmRvY2QCBg8VAQBkAgcPFgIfJQU5aHR0cHM6Ly9mcy5rbmVzc2V0Lmdvdi5pbC8vMTYvQ29tbWl0dGVlcy8xNl9wdHZfNzE3ODEuZG9jFgICAQ8PFgIfCgV916bXlSDXpNeZ16fXldeXINei15wg157Xpteo15vXmdedINeV16nXmdeo15XXqteZ150gKNeQ15LXqNeqINep15nXqNeV16rXmdedINeR16LXoNejINeU15zXldecKSAo16rXmden15XXnyks15TXqtep16Ei15UtMjAwNiBkZAIJDw8WAh8KBToyMSDXkdee16jXoSAyMDA2LCDXmyLXkCDXkdeQ15PXqCDXqtep16Ei15UsINeR16nXoteUIDEyOjMwZGQCCw8PFgIfJmhkFgJmDxUBAGQCDA8VAQBkAg0PFgIfJQVHL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGFnZXMvQWxsQ29tbWl0dGVlc0FnZW5kYS5hc3B4P1RhYj0zJkl0ZW1JRD0xMjk0NTBkAgsPZBYQAgMPFgIfJQUeL0FjdGl2aXR5L2NvbW1pdHRlZXMvRWNvbm9taWNzFgICAQ8PFgIfCgUV15XXoteT16og15TXm9ec15vXnNeUZGQCBQ8WAh8lBTlodHRwczovL2ZzLmtuZXNzZXQuZ292LmlsLy8xNi9Db21taXR0ZWVzLzE2X3B0dl83MTc4MC5kb2NkAgYPFQEAZAIHDxYCHyUFOWh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE2L0NvbW1pdHRlZXMvMTZfcHR2XzcxNzgwLmRvYxYCAgEPDxYCHwoFfdem15Ug16jXqdeV16og16nXk9eV16og15TXqtei15XXpNeUICjXqdeZ16DXldeZINeX15zXpyDXkCcg15zXqteV16HXpNeqKSwg15TXqtep16Ei15UtMjAwNiDXkdeT15HXqCDXnteh15XXoyDXm9eo150g16nXnNeV150gZGQCCQ8PFgIfCgU6MjEg15HXnteo16EgMjAwNiwg15si15Ag15HXkNeT16gg16rXqdehIteVLCDXkdep16LXlCAxMjoxNWRkAgsPDxYCHyZoZBYCZg8VAQBkAgwPFQEAZAINDxYCHyUFRy9BY3Rpdml0eS9jb21taXR0ZWVzL1BhZ2VzL0FsbENvbW1pdHRlZXNBZ2VuZGEuYXNweD9UYWI9MyZJdGVtSUQ9MTI5NDQ5ZAIMD2QWEAIDDxYCHyUFHi9BY3Rpdml0eS9jb21taXR0ZWVzL0Vjb25vbWljcxYCAgEPDxYCHwoFFdeV16LXk9eqINeU15vXnNeb15zXlGRkAgUPFgIfJQU5aHR0cHM6Ly9mcy5rbmVzc2V0Lmdvdi5pbC8vMTYvQ29tbWl0dGVlcy8xNl9wdHZfNzE3NzkuZG9jZAIGDxUBAGQCBw8WAh8lBTlodHRwczovL2ZzLmtuZXNzZXQuZ292LmlsLy8xNi9Db21taXR0ZWVzLzE2X3B0dl83MTc3OS5kb2MWAgIBDw8WAh8KBXLXqten16DXldeqINeU16rXoteR15XXqNeUICjXqteZ16fXldefINee16EnLi4uKSwg15TXqtep16Ei15UtMjAwNiDXkdeT15HXqCDXlNeh15PXqNeq15TXqdeZ157XldepINeR16jXm9eZLdeg15XXoiBkZAIJDw8WAh8KBToyMSDXkdee16jXoSAyMDA2LCDXmyLXkCDXkdeQ15PXqCDXqtep16Ei15UsINeR16nXoteUIDEyOjAwZGQCCw8PFgIfJmhkFgJmDxUBAGQCDA8VAQBkAg0PFgIfJQVHL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGFnZXMvQWxsQ29tbWl0dGVlc0FnZW5kYS5hc3B4P1RhYj0zJkl0ZW1JRD0xMjk0NDhkAg0PZBYQAgMPFgIfJQUeL0FjdGl2aXR5L2NvbW1pdHRlZXMvRWNvbm9taWNzFgICAQ8PFgIfCgUV15XXoteT16og15TXm9ec15vXnNeUZGQCBQ8WAh8lBTlodHRwczovL2ZzLmtuZXNzZXQuZ292LmlsLy8xNi9Db21taXR0ZWVzLzE2X3B0dl83MTc4NS5kb2NkAgYPFQEAZAIHDxYCHyUFOWh0dHBzOi8vZnMua25lc3NldC5nb3YuaWwvLzE2L0NvbW1pdHRlZXMvMTZfcHR2XzcxNzg1LmRvYxYCAgEPDxYCHwoFtQHXqten16DXldeqINeU16rXoteR15XXqNeUICjXqteZ16fXldefINee16EnLi4uKSwg15TXqtep16Ei15QtMjAwNSAt16DXldeh15cg15fXk9epINec16rXmden15XXnyDXqten16DXlCAxOTIg15HXk9eR16gg15HXk9eZ16fXldeqINeo16TXldeQ15nXldeqINec157Xkden16nXmSDXqNep15nXldefINeg15TXmdeS15QgZGQCCQ8PFgIfCgU6MjEg15HXnteo16EgMjAwNiwg15si15Ag15HXkNeT16gg16rXqdehIteVLCDXkdep16LXlCAxMTozMGRkAgsPDxYCHyZoZBYCZg8VAQBkAgwPFQEAZAINDxYCHyUFRy9BY3Rpdml0eS9jb21taXR0ZWVzL1BhZ2VzL0FsbENvbW1pdHRlZXNB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dWFsX2lkX3Q9OTc2FgJmDxUBD9eQ15XXpNeZ16gg15vXpWQCCw8WAh8lBT0vQWN0aXZpdHkvY29tbWl0dGVlcy9rbmVzc2V0L1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIS9BY3Rpdml0eS9jb21taXR0ZWVzL2tuZXNzZXQvTmV3c2QCFw8WAh8lBTovQWN0aXZpdHkvY29tbWl0dGVlcy9rbmVzc2V0L1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIBD2QWDgIBDxYCHyUFHC9BY3Rpdml0eS9jb21taXR0ZWVzL0ZpbmFuY2UWAmYPFQEV15XXoteT16og15TXm9eh16TXmdedZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU9aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD0zNRYCZg8VAQ/Xntep15Qg15LXpNeg15lkAgsPFgIfJQU9L0FjdGl2aXR5L2NvbW1pdHRlZXMvRmluYW5jZS9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSEvQWN0aXZpdHkvY29tbWl0dGVlcy9GaW5hbmNlL05ld3NkAhcPFgIfJQU6L0FjdGl2aXR5L2NvbW1pdHRlZXMvRmluYW5jZS9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCAg9kFg4CAQ8WAh8lBR4vQWN0aXZpdHkvY29tbWl0dGVlcy9FY29ub21pY3MWAmYPFQEV15XXoteT16og15TXm9ec15vXnNeUZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU+aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD05MTQWAmYPFQEP15PXldeTINeR15nXmNefZAILDxYCHyUFPy9BY3Rpdml0eS9jb21taXR0ZWVzL0Vjb25vbWljcy9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSMvQWN0aXZpdHkvY29tbWl0dGVlcy9FY29ub21pY3MvTmV3c2QCFw8WAh8lBTwvQWN0aXZpdHkvY29tbWl0dGVlcy9FY29ub21pY3MvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAgMPZBYOAgEPFgIfJQUjL0FjdGl2aXR5L2NvbW1pdHRlZXMvRm9yZWlnbkFmZmFpcnMWAmYPFQEi15XXoteT16og15TXl9eV16Ug15XXlNeR15nXmNeX15XXn2QCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFPGh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9MRYCZg8VASLXmdeV15zXmSDXmdeV15DXnCDXkNeT15zXqdeY15nXmdefZAILDxYCHyUFRC9BY3Rpdml0eS9jb21taXR0ZWVzL0ZvcmVpZ25BZmZhaXJzL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFKC9BY3Rpdml0eS9jb21taXR0ZWVzL0ZvcmVpZ25BZmZhaXJzL05ld3NkAhcPFgIfJQVBL0FjdGl2aXR5L2NvbW1pdHRlZXMvRm9yZWlnbkFmZmFpcnMvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAgQPZBYOAgEPFgIfJQUkL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxBZmZhaXJzFgJmDxUBK9eV16LXk9eqINeU16TXoNeZ150g15XXlNeS16DXqiDXlNeh15HXmdeR15RkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT5odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTg2MRYCZg8VAQ/Xmdei16fXkSDXkNep16hkAgsPFgIfJQVFL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxBZmZhaXJzL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFKS9BY3Rpdml0eS9jb21taXR0ZWVzL0ludGVybmFsQWZmYWlycy9OZXdzZAIXDxYCHyUFQi9BY3Rpdml0eS9jb21taXR0ZWVzL0ludGVybmFsQWZmYWlycy9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCBQ9kFg4CAQ8WAh8lBRkvQWN0aXZpdHkvY29tbWl0dGVlcy9odWthFgJmDxUBJteV16LXk9eqINeU15fXlden15QsINeX15XXpyDXldee16nXpNeYZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU/aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD0xMDY3FgJmDxUBE9ep157Xl9eUINeo15XXmNee159kAgsPFgIfJQU6L0FjdGl2aXR5L2NvbW1pdHRlZXMvaHVrYS9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBR4vQWN0aXZpdHkvY29tbWl0dGVlcy9odWthL05ld3NkAhcPFgIfJQU3L0FjdGl2aXR5L2NvbW1pdHRlZXMvaHVrYS9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCBg9kFg4CAQ8WAh8lBSAvQWN0aXZpdHkvY29tbWl0dGVlcy9JbW1pZ3JhdGlvbhYCZg8VATTXldei15PXqiDXlNei15zXmdeZ15QsINeU16fXnNeZ15jXlCDXldeU16rXpNeV16bXldeqZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBH9eR16jXkNep15XXqiDXl9eR16gg15TXm9eg16HXqiBkAgcPFgIfJQU+aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD05NTEWAmYPFQER16LXldeT15Mg16TXldeo16hkAgsPFgIfJQVBL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW1taWdyYXRpb24vUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUlL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW1taWdyYXRpb24vTmV3c2QCFw8WAh8lBT4vQWN0aXZpdHkvY29tbWl0dGVlcy9JbW1pZ3JhdGlvbi9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCBw9kFg4CAQ8WAh8lBR4vQWN0aXZpdHkvY29tbWl0dGVlcy9FZHVjYXRpb24WAmYPFQEy15XXoteT16og15TXl9eZ16DXldeaLCDXlNeq16jXkdeV16og15XXlNeh16TXldeo15hkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwNDMWAmYPFQER15nXldeh16Mg15jXmdeZ15FkAgsPFgIfJQU/L0FjdGl2aXR5L2NvbW1pdHRlZXMvRWR1Y2F0aW9uL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIy9BY3Rpdml0eS9jb21taXR0ZWVzL0VkdWNhdGlvbi9OZXdzZAIXDxYCHyUFPC9BY3Rpdml0eS9jb21taXR0ZWVzL0VkdWNhdGlvbi9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCCA9kFg4CAQ8WAh8lBRovQWN0aXZpdHkvY29tbWl0dGVlcy9MYWJvchYCZg8VASTXldei15PXqiDXlNei15HXldeT15Qg15XXlNeo15XXldeX15RkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT5odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTc1NBYCZg8VARfXmdep16jXkNecINeQ15nXmdeb15zXqGQCCw8WAh8lBTsvQWN0aXZpdHkvY29tbWl0dGVlcy9MYWJvci9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBR8vQWN0aXZpdHkvY29tbWl0dGVlcy9MYWJvci9OZXdzZAIXDxYCHyUFOC9BY3Rpdml0eS9jb21taXR0ZWVzL0xhYm9yL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIJD2QWDgIBDxYCHyUFIS9BY3Rpdml0eS9jb21taXR0ZWVzL1N0YXRlQ29udHJvbBYCZg8VATXXlNeV15XXoteT15Qg15zXoteg15nXmdeg15kg15HXmden15XXqNeqINeU157Xk9eZ16DXlGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFPmh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9ODc2FgJmDxUBD9ee15nXp9eZINec15XXmWQCCw8WAh8lBUIvQWN0aXZpdHkvY29tbWl0dGVlcy9TdGF0ZUNvbnRyb2wvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUmL0FjdGl2aXR5L2NvbW1pdHRlZXMvU3RhdGVDb250cm9sL05ld3NkAhcPFgIfJQU/L0FjdGl2aXR5L2NvbW1pdHRlZXMvU3RhdGVDb250cm9sL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIKD2QWDgIBDxYCHyUFGi9BY3Rpdml0eS9jb21taXR0ZWVzL1dvbWVuFgJmDxUBSdeU15XXldei15PXlCDXnNen15nXk9eV150g157Xotee15Mg15TXkNeZ16nXlCDXldec16nXldeV15nXldefINee15LXk9eo15lkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEh15HXqNeQ16nXldeqINeX15HXqNeqINeU15vXoNeh16ogZAIHDxYCHyUFPmh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9OTA1FgJmDxUBE9ek16DXmdeg15Qg16rXnteg15VkAgsPFgIfJQU7L0FjdGl2aXR5L2NvbW1pdHRlZXMvV29tZW4vUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUfL0FjdGl2aXR5L2NvbW1pdHRlZXMvV29tZW4vTmV3c2QCFw8WAh8lBTgvQWN0aXZpdHkvY29tbWl0dGVlcy9Xb21lbi9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCCw9kFg4CAQ8WAh8lBRwvQWN0aXZpdHkvY29tbWl0dGVlcy9TY2llbmNlFgJmDxUBKteV16LXk9eqICDXlNee15PXoiAg15XXlNeY15vXoNeV15zXldeS15nXlGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFPmh0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9OTM4FgJmDxUBE9eQ15nXmdee158g16LXldeT15RkAgsPFgIfJQU9L0FjdGl2aXR5L2NvbW1pdHRlZXMvU2NpZW5jZS9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSEvQWN0aXZpdHkvY29tbWl0dGVlcy9TY2llbmNlL05ld3NkAhcPFgIfJQU6L0FjdGl2aXR5L2NvbW1pdHRlZXMvU2NpZW5jZS9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCDA9kFg4CAQ8WAh8lBRsvQWN0aXZpdHkvY29tbWl0dGVlcy9oZWFsdGgWAmYPFQEX15XXoteT16og15TXkdeo15nXkNeV16pkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwMzkWAmYPFQEV15DXldeo15nXkNecINeR15XXodeVZAILDxYCHyUFPC9BY3Rpdml0eS9jb21taXR0ZWVzL2hlYWx0aC9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9UYWI9MWQCEQ8WAh8lBSAvQWN0aXZpdHkvY29tbWl0dGVlcy9oZWFsdGgvTmV3c2QCFw8WAh8lBTkvQWN0aXZpdHkvY29tbWl0dGVlcy9oZWFsdGgvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAg0PZBYOAgEPFgIfJQUlL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxTZWN1cml0eRYCZg8VASbXlNeV15XXoteT15Qg15zXkdeZ15jXl9eV158g15zXkNeV157XmWQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VAR/Xkdeo15DXqdeV16og15fXkdeoINeU15vXoNeh16ogZAIHDxYCHyUFP2h0dHA6Ly93d3cua25lc3NldC5nb3YuaWwvbWsvaGViL21rLmFzcD9ta19pbmRpdmlkdWFsX2lkX3Q9MTExMBYCZg8VARPXpteR15nXp9eUINek15XXktecZAILDxYCHyUFRi9BY3Rpdml0eS9jb21taXR0ZWVzL0ludGVybmFsU2VjdXJpdHkvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUqL0FjdGl2aXR5L2NvbW1pdHRlZXMvSW50ZXJuYWxTZWN1cml0eS9OZXdzZAIXDxYCHyUFQy9BY3Rpdml0eS9jb21taXR0ZWVzL0ludGVybmFsU2VjdXJpdHkvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAg4PZBYOAgEPFgIfJQUjL0FjdGl2aXR5L2NvbW1pdHRlZXMvUHVibGljUHJvamVjdHMWAmYPFQEs15TXldeV16LXk9eUINec157XmdeW157XmdedINem15nXkdeV16jXmdeZ151kAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwOTAWAmYPFQEN15DXldeU15Mg15jXnGQCCw8WAh8lBUQvQWN0aXZpdHkvY29tbWl0dGVlcy9QdWJsaWNQcm9qZWN0cy9QYWdlcy9Db21taXR0ZWVBZ2VuZGEuYXNweD9U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aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD0xMTExFgJmDxUBFdeQ15zXmdeU15Ug16jXkdeZ15HXlWQCCw8WAh8lBT0vQWN0aXZpdHkvY29tbWl0dGVlcy9Gb3JlaWduL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFIS9BY3Rpdml0eS9jb21taXR0ZWVzL0ZvcmVpZ24vTmV3c2QCFw8WAh8lBTovQWN0aXZpdHkvY29tbWl0dGVlcy9Gb3JlaWduL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIXD2QWDgIBDxYCHyUFIi9BY3Rpdml0eS9jb21taXR0ZWVzL1lvdW5nSXNyYWVsaXMWAmYPFQE515TXldeV16LXk9eUINeU157XmdeV15fXk9eqINec16LXoNeZ15nXoNeZINeU16bXoteZ16jXmdedZAIDDxYCHyZoFgICAQ8WAh8lZGQCBQ9kFgJmDxUBIdeR16jXkNep15XXqiDXl9eR16jXqiDXlNeb16DXodeqIGQCBw8WAh8lBT9odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTEwODIWAmYPFQET16DXotee15Qg15zXlteZ157XmWQCCw8WAh8lBUMvQWN0aXZpdHkvY29tbWl0dGVlcy9Zb3VuZ0lzcmFlbGlzL1BhZ2VzL0NvbW1pdHRlZUFnZW5kYS5hc3B4P1RhYj0xZAIRDxYCHyUFJy9BY3Rpdml0eS9jb21taXR0ZWVzL1lvdW5nSXNyYWVsaXMvTmV3c2QCFw8WAh8lBUAvQWN0aXZpdHkvY29tbWl0dGVlcy9Zb3VuZ0lzcmFlbGlzL1BhZ2VzL0NvbW1pdHRlZVByb3RvY29scy5hc3B4ZAIYD2QWDgIBDxYCHyUFHS9BY3Rpdml0eS9jb21taXR0ZWVzL0Jhc2ljR292FgJmDxUBTNeU15XXldei15PXlCDXlNee15nXldeX15PXqiDXnNeq15nXp9eV16DXmdedINec15fXldenINeZ16HXldeTOiDXlNee157Xqdec15RkAgMPFgIfJmgWAgIBDxYCHyVkZAIFD2QWAmYPFQEf15HXqNeQ16nXldeqINeX15HXqCDXlNeb16DXodeqIGQCBw8WAh8lBT5odHRwOi8vd3d3LmtuZXNzZXQuZ292LmlsL21rL2hlYi9tay5hc3A/bWtfaW5kaXZpZHVhbF9pZF90PTk3NhYCZg8VAQ/XkNeV16TXmdeoINeb16VkAgsPFgIfJQU+L0FjdGl2aXR5L2NvbW1pdHRlZXMvQmFzaWNHb3YvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUiL0FjdGl2aXR5L2NvbW1pdHRlZXMvQmFzaWNHb3YvTmV3c2QCFw8WAh8lBTsvQWN0aXZpdHkvY29tbWl0dGVlcy9CYXNpY0dvdi9QYWdlcy9Db21taXR0ZWVQcm90b2NvbHMuYXNweGQCGQ9kFg4CAQ8WAh8lBRwvQWN0aXZpdHkvY29tbWl0dGVlcy9HYXNGdW5kFgJmDxUBP9eU15XXldei15PXlCDXnNek15nXp9eV15cg16LXnCDXlNen16jXnyDXnNeQ15bXqNeX15kg15nXqdeo15DXnGQCAw8WAh8maBYCAgEPFgIfJWRkAgUPZBYCZg8VASHXkdeo15DXqdeV16og15fXkdeo16og15TXm9eg16HXqiBkAgcPFgIfJQU/aHR0cDovL3d3dy5rbmVzc2V0Lmdvdi5pbC9tay9oZWIvbWsuYXNwP21rX2luZGl2aWR1YWxfaWRfdD0xMTA4FgJmDxUBHdec15nXnteV16gg16HXldefINeU16gg157XnNeaZAILDxYCHyUFPS9BY3Rpdml0eS9jb21taXR0ZWVzL0dhc0Z1bmQvUGFnZXMvQ29tbWl0dGVlQWdlbmRhLmFzcHg/VGFiPTFkAhEPFgIfJQUhL0FjdGl2aXR5L2NvbW1pdHRlZXMvR2FzRnVuZC9OZXdzZAIXDxYCHyUFOi9BY3Rpdml0eS9jb21taXR0ZWVzL0dhc0Z1bmQvUGFnZXMvQ29tbWl0dGVlUHJvdG9jb2xzLmFzcHhkAhoPZBYOAgEPFgIfJQUeL0FjdGl2aXR5L2NvbW1pdHRlZXMvUGV0aXRpb25zFgJmDxUBNdeU15XXldei15PXlCDXlNee15nXldeX15PXqiDXnNek16DXmdeV16og15TXpteZ15HXldeoZAIDDxYC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Gw8WAh8DBfElPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTAwMCcgZGF0YS1oPScxNTAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfOTMyNy5KUEcnPjxpbWcgIGFsdD0n157XkdeV15DXqiDXlNeb16DXodeqINec15XXkdep16og15fXkicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfOTMyNy5KUEcnIGlkPSc5JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfNTQ5NS5KUEcnPjxpbWcgIGFsdD0n157Xqdeb158g15TXm9eg16HXqiDXkdeS15HXoteqINeo150nIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzU0OTUuSlBHJyBpZD0nNicgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzE1MDAnIGRhdGEtaD0nOTk2Jz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMTQwMDY3MDIyLmpwZyc+PGltZyAgYWx0PSfXl9eW15nXqiDXlNeb16DXodeqINeV15TXnteg15XXqNeUINep157XldecINeU15vXoNeZ16HXlCDXnNee16nXm9efLCDXpNeo15kg15nXpteZ16jXqteVINep15wg15HXoNeVINeQ15zXp9efJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18xNDAwNjcwMjIuanBnJyBpZD0nMTMnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxMDAwJyBkYXRhLWg9JzE1MDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNzcwLkpQRyc+PGltZyAgYWx0PSfXlNei16rXpyDXqdecINee15LXmdec16og15TXotem157XkNeV16onIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE3NzAuSlBHJyBpZD0nMicgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzE1MDAnIGRhdGEtaD0nMTA4MSc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzI2OTc1MDQ3MS5qcGcnPjxpbWcgIGFsdD0n15DXldec150g16nXkNeS15DXnC4g16TXodeZ16TXoSDXlNen15nXqCDXkdei15nXpteV15HXldeVINep15wg15TXkNeV157Xnycgc3JjPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjY5NzUwNDcxLmpwZycgaWQ9JzE2JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTY2Mi5KUEcnPjxpbWcgIGFsdD0n16fXldee16og15TXntee16nXnNeUOiDXqtei16jXldeb16og16bXmdec15XXnteZINeo15DXqdeZINee157Xqdec15XXqiDXmdep16jXkNecJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNjYyLkpQRycgaWQ9JzE4JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfNDU1OS5KUEcnPjxpbWcgIGFsdD0n15TXktefINeU15DXqNeb15nXkNeV15zXldeS15kg15HXm9eg16HXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfNDU1OS5KUEcnIGlkPSc1JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfOTI1MS5KUEcnPjxpbWcgIGFsdD0n16fXldee16og15TXntee16nXnNeUJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR185MjUxLkpQRycgaWQ9JzgnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR181NzUyLkpQRyc+PGltZyAgYWx0PSfXlNeb16DXmdeh15Qg15zXnteR15XXkNeqINec16nXm9eqINeZ15XXqdeRLdeo15DXqSDXlNeb16DXodeqJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR181NzUyLkpQRycgaWQ9JzcnID48L2E+PC9kaXY+DQo8ZGl2IGNsYXNzPSdnYWxsZXJ5SXRlbScgZGF0YS13PScxNTAwJyBkYXRhLWg9JzEwMDAnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNjE5LkpQRyc+PGltZyAgYWx0PSfXlNeb16DXmdeh15Qg15zXm9eg16HXqiDXnteQ15LXoyDXlNeV15XXoteT15XXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTYxOS5KUEcnIGlkPScxNycgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzEwMDAnIGRhdGEtaD0nMTUwMCc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE2OTkuSlBHJz48aW1nICBhbHQ9J9eT15XXm9efINeU16DXldeQ157XmdedINeR15DXldec150g15TXntec15nXkNeUJyBzcmM9Jy9NYWluRm9vdGVySW1hZ2VzL0lNR18xNjk5LkpQRycgaWQ9JzIwJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTAwMCcgZGF0YS1oPScxNTAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTc1OS5KUEcnPjxpbWcgIGFsdD0n15DXldec150g16nXkNeS15DXnC4g16TXqNeYINee16nXmNeZ15cg15TXp9eZ16gg15TXkNee16bXoteZINeR16LXmdem15XXkdeVINep15wg15TXkNeV157Xnycgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTc1OS5KUEcnIGlkPScyMScgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzE1MDAnIGRhdGEtaD0nMTAwMCc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvSU1HXzE2NjcuSlBHJz48aW1nICBhbHQ9J9eQ15XXnNedINee15zXmdeQ16og15TXm9eg16HXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTY2Ny5KUEcnIGlkPScxOScgPjwvYT48L2Rpdj4NCjxkaXYgY2xhc3M9J2dhbGxlcnlJdGVtJyBkYXRhLXc9JzE1MDAnIGRhdGEtaD0nMTAwMCc+PGEgaHJlZj0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzIyMDM5OTM5LmpwZyc+PGltZyAgYWx0PSfXkNeV15zXnSDXntec15nXkNeqINeU15vXoNeh16onIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzIyMDM5OTM5LmpwZycgaWQ9JzEwJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMzc4My5KUEcnPjxpbWcgIGFsdD0n157Xqdee16gg15TXm9eg16HXqiDXkdee16nXmdee15Qg15jXp9eh15nXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMzc4My5KUEcnIGlkPSc0JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMTA0Jz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMTQxMTIwNDc4LmpwZyc+PGltZyAgYWx0PSfXlNee16DXldeo15QsINek16jXmSDXmdem15nXqNeq15Ug16nXnCDXkdeg15Ug15DXnNen158sINeU157Xldem15HXqiDXnteV15wg15TXm9eg15nXodeUINec157Xqdeb158g15TXm9eg16HXqicgc3JjPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMTQxMTIwNDc4LmpwZycgaWQ9JzE0JyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTAwMCcgZGF0YS1oPScxNTAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMjA2OC5KUEcnPjxpbWcgIGFsdD0n157XldecINeU15vXoNeZ16HXlCDXnNee16nXm9efINeU15vXoNeh16o6INek16HXnCDXlNee16DXldeo15Qg16TXqNeZINeZ16bXmdeo16rXlSDXqdecINeR16DXlSDXkNec16fXnycgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMjA2OC5KUEcnIGlkPSczJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjIyODA4MjEuanBnJz48aW1nICBhbHQ9J9ee16nXm9efINeU15vXoNeh16ouINeU15HXoNeZ15nXnyDXlNee16fXldeo15kg15XXkNeS16Mg15TXldeV16LXk9eV16onIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzIyMjgwODIxLmpwZycgaWQ9JzExJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPScxMDAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9zaHV0dGVyc3RvY2tfMjI2MTg1MzEuanBnJz48aW1nICBhbHQ9J9ee16nXm9efINeU15vXoNeh16onIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzIyNjE4NTMxLmpwZycgaWQ9JzEyJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTAwMCcgZGF0YS1oPScxNTAwJz48YSBocmVmPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTc2NC5KUEcnPjxpbWcgIGFsdD0n15DXldec150g16nXkNeS15DXnC4g16TXqNeYINee16nXmNeZ15cg15TXp9eZ16gg15TXkNee16bXoteZINeR16LXmdem15XXkdeVINep15wg15TXkNeV157Xnycgc3JjPScvTWFpbkZvb3RlckltYWdlcy9JTUdfMTc2NC5KUEcnIGlkPScxJyA+PC9hPjwvZGl2Pg0KPGRpdiBjbGFzcz0nZ2FsbGVyeUl0ZW0nIGRhdGEtdz0nMTUwMCcgZGF0YS1oPSc5ODYnPjxhIGhyZWY9Jy9NYWluRm9vdGVySW1hZ2VzL3NodXR0ZXJzdG9ja18yNjk3NDI4MzMuanBnJz48aW1nICBhbHQ9J9eQ15LXoyDXldei15PXldeqINeU15vXoNeh16onIHNyYz0nL01haW5Gb290ZXJJbWFnZXMvc2h1dHRlcnN0b2NrXzI2OTc0MjgzMy5qcGcnIGlkPScxNScgPjwvYT48L2Rpdj4NCmQCHQ8WAh8DBcQBMjAyMywg15vXnCDXlNeW15vXldeZ15XXqiDXqdee15XXqNeV16og15zXnteT15nXoNeqINeZ16nXqNeQ15wgLSDXlNeb16DXodeqINeQ15Ug15zXpteT15PXmdedINep15zXmdep15nXmdedLCDXm9ee16TXldeo15ggPGEgaHJlZj0vQWJvdXQvUGFnZXMvQ29weXJpZ2h0LmFzcHggdGl0bGU9J9eR16fXmdep15XXqCc+15HXp9eZ16nXldeoPC9hPmQYBAUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgsFPWN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGR0RnJvbURhdGUFRmN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGR0RnJvbURhdGUkY2FsZW5kYXIFRmN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGR0RnJvbURhdGUkY2FsZW5kYXIFO2N0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGR0VG9EYXRlBURjdGwwMCRjdGw2MiRnXzJiMjdkNGUyX2Y2ODVfNDk4ZV85Njc5XzkwODJiMTlhYWJjZiRkdFRvRGF0ZSRjYWxlbmRhcgVEY3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkZHRUb0RhdGUkY2FsZW5kYXIFQGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGNtYlRpbWVQZXJpb2QFPWN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGNtYktuZXNzZXQFQGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJHJjYkNvbW1pdHRlZXMFPGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGJ0blNlYXJjaAU7Y3RsMDAkY3RsNjIkZ18yYjI3ZDRlMl9mNjg1XzQ5OGVfOTY3OV85MDgyYjE5YWFiY2YkYnRuQ2xlYXIFQGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJHJjYkNvbW1pdHRlZXMPFCsAAgUT15vXnCDXlNeV15XXoteT15XXqgUBMGQFPWN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGNtYktuZXNzZXQPFCsAAgUa15vXoNeh16og15TXl9ee16kt16LXqdeo15QFGDA3LzA2LzE5OTkjMTcvMDIvMjAwM3wxNWQFQGN0bDAwJGN0bDYyJGdfMmIyN2Q0ZTJfZjY4NV80OThlXzk2NzlfOTA4MmIxOWFhYmNmJGNtYlRpbWVQZXJpb2QPFCsAAmVlZJA/0yNVGAVmitzJabDu7eZGkIDYesemWoK5F3+B7N8r',
            '/wEdAAwbEiILNK8Hx17ymCWY6ivnbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGsBk+aLl/7UfCwZ82Xjv94WBv3W9eWaMXC/OFDDwyU85Q=='],
        'כנסת הארבע-עשרה': [
            '',
            '/wEdAAwzP//wZ/f4UVvxkXSyqreJbtRwY7U/L+zGsEdm0lPaJbrx1DHRJALrq4ceB8t0EiR8bkFsLrHm2gdoR+BEVdtdYqkEmo3IgTvehwVsmTfFd4jKQuisImjtN/I/mMiJYoo0HyiQgannOHqekk5Q3+W91+yfB9hQahy78tryUW+bUOXSzZxNdOoaXsU4UU/of+Z7GxFfkXYhSkvxvUORpUsJPBZdwQJPVZOyHIGd2SEvl4rVsyKfUtcIzlBlZQ5WJGtrOuykg8BjVsWip04LZaxLphddTdqCprtGiml2q1U0Bw==']
        # 'כנסת השלוש-עשרה': [, ],
        # 'כנסת השתים-עשרה': [, ],
        # 'כנסת האחת-עשרה': [, ],
        # 'כנסת העשירית': [, ],
        # 'כנסת התשיעית': [, ],
        # 'כנסת השמינית': [, ],
        # 'כנסת השביעית': [, ],
        # 'כנסת השישית': [, ],
        # 'כנסת החמישית': [, ],
        # 'כנסת הרביעית': [, ],
        # 'כנסת השלישית': [, ],
        # 'כנסת השנייה': [, ],
        # 'כנסת הראשונה': [, ]
    }
    return data_event[knesset_num][0], data_event[knesset_num][1]


def knesset_num_to_date(knesset_num):
    today = str(date.today())
    today = today[-2:] + '/' + today[-5:-3] + '/' + today[:4]
    knesset = {'כנסת העשרים וחמש': ['15/11/2022', today],
               'כנסת העשרים וארבע': ['06/04/2021', '15/11/2022'],
               'כנסת העשרים ושלוש': ['16/03/2020', '06/04/2021'],
               'כנסת העשרים ושתיים': ['03/10/2019', '16/03/2020'],
               'כנסת העשרים ואחת': ['30/04/2019', '03/10/2019'],
               'כנסת העשרים': ['31/03/2015', '30/04/2019'],
               'כנסת התשע-עשרה': ['05/02/2013', '31/03/2015'],
               'כנסת השמונה-עשרה': ['24/02/2009', '05/02/2013'],
               'כנסת השבע-עשרה': ['17/04/2006', '24/02/2009'],
               'כנסת השש-עשרה': ['17/02/2003', '17/04/2006'],
               'כנסת החמש-עשרה': ['07/06/1999', '17/02/2003'],
               'כנסת הארבע-עשרה': ['17/06/1996', '07/06/1999'],
               'כנסת השלוש-עשרה': ['13/07/1992', '17/06/1996'],
               'כנסת השתים-עשרה': ['21/11/1988', '13/07/1992'],
               'כנסת האחת-עשרה': ['13/08/1984', '21/11/1988'],
               'כנסת העשירית': ['20/07/1981', '13/08/1984'],
               'כנסת התשיעית': ['13/06/1977', '20/07/1981'],
               'כנסת השמינית': ['21/01/1974', '13/06/1977'],
               'כנסת השביעית': ['17/11/1969', '21/01/1974'],
               'כנסת השישית': ['22/11/1965', '17/11/1969'],
               'כנסת החמישית': ['04/09/1961', '22/11/1965'],
               'כנסת הרביעית': ['30/11/1959', '04/09/1961'],
               'כנסת השלישית': ['15/08/1955', '30/11/1959'],
               'כנסת השנייה': ['20/08/1951', '15/08/1955'],
               'כנסת הראשונה': ['14/02/1949', '20/08/1951']}
    return knesset[knesset_num][0], knesset[knesset_num][1]


def get_search_data(knesset_num, committee_name='כל הוועדות', subject='נושא הישיבה'):
    f_date, t_date = knesset_num_to_date(knesset_num)
    f_date_adjusted = f_date[-4:] + '-' + f_date[-7: -5] + '-' + f_date[: 2]
    t_date_adjusted = t_date[-4:] + '-' + t_date[-7: -5] + '-' + t_date[: 2]
    committees_values = {"כל הוועדות": "0", "הוועדה המסדרת": "689", "ועדת הכנסת": "1", "ועדת הכספים": "2",
                         "ועדת הכלכלה": "3",
                         "ועדת החוץ והביטחון": "4", "ועדת הפנים והגנת הסביבה": "5", "ועדת החוקה, חוק ומשפט": "6",
                         "ועדת העלייה, הקליטה והתפוצות": "27", "ועדת החינוך, התרבות והספורט": "8",
                         "ועדת העבודה והרווחה": "28",
                         "הוועדה לענייני ביקורת המדינה": "10", "הוועדה לקידום מעמד האישה ולשוויון מגדרי": "11",
                         "ועדת  המדע  והטכנולוגיה": "13", "ועדת הבריאות": "752", "הוועדה לביטחון לאומי": "750",
                         "הוועדה למיזמים ציבוריים": "784", "ועדת האתיקה": "14",
                         'הוועדה המיוחדת לדיון בהצעת החוק לתיקון פקודת המשטרה (סמכויות), התשפ"ג-2022 (פ/80/25)': "779",
                         "הוועדה המיוחדת למאבק בשימוש בסמים ובאלכוהול": "12",
                         "הוועדה המיוחדת לחיזוק ופיתוח הנגב והגליל": "780",
                         "הוועדה המיוחדת לצמצום פערים חברתיים בפריפריה": "781", "הוועדה המיוחדת לזכויות הילד": "25",
                         "הוועדה המיוחדת לטיפול בשורדי השואה": "785", "הוועדה המיוחדת לעובדים זרים": "15",
                         "הוועדה המיוחדת לענייני הצעירים": "783", "הוועדה המיוחדת לתיקונים לחוק יסוד: הממשלה": "788",
                         "הוועדה לפיקוח על הקרן לאזרחי ישראל": "708", "הוועדה המיוחדת לפניות הציבור": "19",
                         "הוועדה המשותפת לוועדת הכספים ולוועדת החוץ והביטחון לתקציב הביטחון": "733",
                         'ועדה משותפת של הוועדה לביטחון לאומי וועדת החוקה, חוק ומשפט, לפי חוק האזנת סתר, התשל"ט-1979': "786",
                         "ועדה משותפת לדיון בהצעות חוק כלי הנשק הבלתי חוקיים": "787",
                         "ועדה משותפת של ועדת הכנסת וועדת הפנים והגנת הסביבה לדיון בהצעות חוק בנושא לביטול אזרחותו או תושבותו של פעיל טרור שמקבל תגמול עבור ביצוע מעשה הטרור": "782",
                         "ועדה משותפת לתקציב הכנסת": "209",
                         'ועדה משותפת לוועדת החוקה, חוק ומשפט וועדת החוץ והביטחון ללפי חוק האזנת סתר, התשל"ט-1979': "308",
                         'ועדה משותפת של וועדת החוקה, חוק ומשפט, ועדת הפנים והגנת הסביבה וועדת המדע והטכנולוגיה לפי חוק הכללת אמצעי זיהוי ביומטריים ונתוני זיהוי ביומטריים במסמכי זיהוי ובמאגר מידע, התש"ע-2009': "309",
                         "ועדה משותפת חוץ וביטחון ופנים לדיון בהארכת תוקף חוק האזרחות והכניסה לישראל": "578",
                         "ועדה משותפת של ועדת החוץ והביטחון וועדת החוקה, חוק ומשפט לעניין הכרזה על מצב חירום": "583",
                         "ועדת משנה לקידום עסקיםקטנים ובינוניים": "584",
                         'ועדה משותפת של ועדת החוקה, חוק ומשפט והוועדה לקידום מעמד האישה לדיון בהצעת חוק לביטול ההתיישנות בעבירות מין (תיקוני חקיקה), התשפ"ג 2023 (פ/2559/25)': "789",
                         "הוועדה המשותפת של ועדת החוקה, חוק ומשפט והוועדה לביטחון לאומי לדיון בהצעת חוק לתיקון פקודת המשטרה (המחלקה לחקירת שוטרים)": "790",
                         'הוועדה המשותפת ליישומים ביומטריים לפי חוק הכללת אמצעי זיהוי ביומטריים ונותני זיהוי ביומטריים במסמכי זיהוי ובמאגר מידע, התש"ע-2009': "776",
                         'הוועדה המיוחדת לדיון בהצעת חוק-יסוד: הממשלה (תיקון-שר נוסף במשרד) (פ/81/25) ובהצעת חוק-יסוד: הממשלה (תיקון - כשירותם של שרים) (פ/91/25)': "778"}

    view_state, validation_state = data_by_knesset(knesset_num)
    data = {
        'ctl00$ScriptManager': 'ctl00$ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$UpdatePanel1Panel|ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$btnSearch',
        'ctl00_RadStyleSheetManager1_TSSM': ';TelerikCustomSkins:he-IL:ed423795-5533-4b36-9f73-0922e158d46c:a847d8c1:388d8c0b:4d464ff0;Telerik.Web.UI, Version=2022.2.622.40, Culture=neutral, PublicKeyToken=121fae78165ba3d4:he-IL:dbbf043d-66df-4172-9982-e8bb59918fa4:aac1aeb7:c73cf106:c86a4a06:4c651af2:1c2121e:e24b8e95:45085116:fe53831e:bc8339f7',
        'ctl00$ctl76$MasterPageHidden': 'CommitteePortalMP',
        'ctl00$ctl76$alternateMobliePageshidden': 'main.knesset.gov.il/Pages|main.knesset.gov.il/News/PressReleases/Pages|main.knesset.gov.il/Activity/Visit/Pages|main.knesset.gov.il/About/Building/Pages|main.knesset.gov.il/About/Pages|main.knesset.gov.il/mk/Pages|main.knesset.gov.il/Activity/committees|main.knesset.gov.il/Activity/Plenum/Pages|main.knesset.gov.il/Activity/Info/Research/Pages',
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$dtFromDate': str(f_date_adjusted),
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$dtFromDate$dateInput': str(f_date),
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtFromDate_dateInput_ClientState': '{"enabled":true,"emptyMessage":"מתאריך","validationText":"' + f_date_adjusted + '-00-00-00","valueAsString":"' + f_date_adjusted + '-00-00-00","minDateStr":"1900-01-01-00-00-00","maxDateStr":"2099-12-31-00-00-00","lastSetTextBoxValue":' + '"' + f_date + '"' + '}',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtFromDate_calendar_SD': '[]',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtFromDate_calendar_AD': '[[1900,1,1],[2099,12,30],[2023,3,29]]',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtFromDate_ClientState': '{"minDateStr":"1900-01-01-00-00-00","maxDateStr":"2099-12-31-00-00-00"}',
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$dtToDate': str(t_date_adjusted),
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$dtToDate$dateInput': str(t_date),
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtToDate_dateInput_ClientState': '{"enabled":true,"emptyMessage":"עד תאריך","validationText":"' + t_date_adjusted + '-00-00-00","valueAsString":"' + t_date_adjusted + '-00-00-00","minDateStr":"1900-01-01-00-00-00","maxDateStr":"2099-12-31-00-00-00","lastSetTextBoxValue":' + '"' + t_date + '"' + '}',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtToDate_calendar_SD': '[]',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtToDate_calendar_AD': '[[1900,1,1],[2099,12,30],[2023,3,29]]',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_dtToDate_ClientState': '{"minDateStr":"1900-01-01-00-00-00","maxDateStr":"2099-12-31-00-00-00"}',
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$cmbTimePeriod': 'פרק זמן',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_cmbTimePeriod_ClientState': '',
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$txtSubject': str(subject),
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_txtSubject_ClientState': '{"enabled":true,"emptyMessage":"' + str(
            subject) + '","validationText":"","valueAsString":"","lastSetTextBoxValue":"' + str(subject) + '"}',
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$cmbKnesset': str(knesset_num),
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_cmbKnesset_ClientState': '',
        'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$rcbCommittees': str(committee_name),
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_rcbCommittees_ClientState': '',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_btnSearch_ClientState': '{"text":"חיפוש","value":"","checked":false,"target":"","navigateUrl":"","commandName":"","commandArgument":"","autoPostBack":true,"selectedToggleStateIndex":0,"validationGroup":"vgNewsSearch","readOnly":false,"primary":false,"enabled":true}',
        'ctl00_ctl62_g_2b27d4e2_f685_498e_9679_9082b19aabcf_btnClear_ClientState': '{"text":"ניקוי","value":"","checked":false,"target":"","navigateUrl":"","commandName":"","commandArgument":"","autoPostBack":true,"selectedToggleStateIndex":0,"validationGroup":null,"readOnly":false,"primary":false,"enabled":true}',
        '__EVENTTARGET': 'ctl00$ctl62$g_2b27d4e2_f685_498e_9679_9082b19aabcf$btnSearch',
        '__EVENTARGUMENT': '',
        '__VIEWSTATE': str(view_state),
        '__VIEWSTATEGENERATOR': 'BAB98CB3',
        '__EVENTVALIDATION': str(validation_state),
        '_wpcmWpid': '',
        'wpcmVal': '',
        'MSOWebPartPage_PostbackSource': '',
        'MSOTlPn_SelectedWpId': '',
        'MSOTlPn_View': '0',
        'MSOTlPn_ShowSettings': 'False',
        'MSOGallery_SelectedLibrary': '',
        'MSOGallery_FilterString': '',
        'MSOTlPn_Button': 'none',
        '__REQUESTDIGEST': 'noDigest',
        'MSOSPWebPartManager_DisplayModeName': 'Browse',
        'MSOSPWebPartManager_ExitingDesignMode': 'false',
        'MSOWebPartPage_Shared': '',
        'MSOLayout_LayoutChanges': '',
        'MSOLayout_InDesignMode': '',
        '_wpSelected': '',
        '_wzSelected': '',
        'MSOSPWebPartManager_OldDisplayModeName': 'Browse',
        'MSOSPWebPartManager_StartWebPartEditingName': 'false',
        'MSOSPWebPartManager_EndWebPartEditing': 'false',
        '__ASYNCPOST': 'true',
        'RadAJAXControlID': 'ctl00_RadAjaxManager1',
    }
    return data


def get_all_committees(url):
    response = requests.get(url, cookies=cookies, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")
    jobs = soup.find_all('table', class_='ComProfitLeftSideTable')
    committees = []
    for job in jobs:
        committee = job.find('a').string
        committee = committee.lstrip()
        committee = committee.rstrip()
        committees.append(committee)
    return committees


def translate_title(title):
    title_dictionary = {'הוועדה המסדרת': 'Arranging_Committee',
                        'ועדת הכנסת': 'Knesset_Committee',
                        'ועדת הכספים': 'Finance_Committee',
                        'ועדת הכלכלה': 'Economy_Committee',
                        'ועדת החוץ והביטחון': 'Foreign_Committee',
                        'ועדת הפנים והגנת הסביבה': 'Internal_Committee',
                        'ועדת החוקה, חוק ומשפט': 'Constitution_Committee',
                        'ועדת העלייה, הקליטה והתפוצות': 'Immigration_Committee',
                        'ועדת החינוך, התרבות והספורט': 'Education_Committee',
                        'ועדת העבודה והרווחה': 'Labor_Committee',
                        'הוועדה לענייני ביקורת המדינה': 'StateControl_Committee',
                        'הוועדה לקידום מעמד האישה ולשוויון מגדרי': 'Women_Committee',
                        'ועדת  המדע  והטכנולוגיה': 'Science_Committee',
                        'ועדת הבריאות': 'Health_Committee',
                        'הוועדה לביטחון לאומי': 'Security_Committee',
                        'הוועדה למיזמים ציבוריים': 'PublicProjects_Committee',
                        'ועדת האתיקה': 'Ethics_Committee',
                        'הוועדה המיוחדת לדיון בהצעת החוק לתיקון פקודת המשטרה (סמכויות), התשפ"ג-2022 (פ/80/25)': 'Police_Committee',
                        'הוועדה המיוחדת למאבק בשימוש בסמים ובאלכוהול': 'Drugs_Committee',
                        'הוועדה המיוחדת לזכויות הילד': 'ChildRights_Committee',
                        'הוועדה המיוחדת לחיזוק ופיתוח הנגב והגליל': 'NegevGalil_Committee',
                        'הוועדה המיוחדת לצמצום פערים חברתיים בפריפריה': 'Periphery_Committee',
                        'הוועדה המיוחדת לטיפול בשורדי השואה': 'Holocaust_Committee',
                        'הוועדה המיוחדת לעובדים זרים': 'ForeignWorkers_Committee',
                        'הוועדה המיוחדת לענייני הצעירים': 'Youth_Committee',
                        'הוועדה המיוחדת לתיקונים לחוק יסוד: הממשלה': 'BasicGov_Committee',
                        'הוועדה לפיקוח על הקרן לאזרחי ישראל': 'GasFund_Committee',
                        'הוועדה המיוחדת לפניות הציבור': 'Petitions_Committee',
                        'הוועדה המשותפת לוועדת הכספים ולוועדת החוץ והביטחון לתקציב הביטחון': 'Finance_Security_Committee',
                        'ועדה משותפת של הוועדה לביטחון לאומי וועדת החוקה, חוק ומשפט, לפי חוק האזנת סתר, התשל"ט-1979': 'Security_Constitution_Committee',
                        'ועדת השירותים הציבוריים': 'PublicService_Committee',
                        'הוועדה המשותפת לועדת החוץ והביטחון וועדת החוקה חוק ומשפט לעניין חוק השב"כ': 'Security_Constitution_Committee',
                        'ועדת חקירה פרלמנטרית בנושא איתור והשבת נכסים של נספי השואה': 'Holocaust_Committee',
                        'ועדת חקירה פרלמנטרית בענין המצוקה הכספית המתמשכת של הרשויות המקומיות': 'Municipalities_Committee',
                        'ועדת החקירה הפרלמנטרית לעניין הסחר בנשים': 'Women_Committee',
                        'ועדת חקירה פרלמנטרית בנושא האלימות בספורט': 'Sport_Committee',
                        'ועדת החקירה הפרלמנטרית בנושא משק המים': 'Water_Committee',
                        'ועדה מיוחדת לנושא הנשירה מבתי הספר': 'School_Committee',
                        'ועדת חקירה פרלמנטרית בנושא הפערים החברתיים בישראל': 'Social_Committee',
                        'ועדה מיוחדת להצעת חוק שירות הביטחון (דחיית שירות לתלמידי ישיבות שתורתם אומנותם)': 'Security_Committee',
                        'ועדת חקירה פרלמנטרית בנושא תאונות הדרכים': 'Traffic_Committee',
                        'ועדה המייעצת בנושא הבדיקה בבנקים ': 'Banking_Committee',
                        'ועדת משנה למאבק בסחר בנשים': 'Women_Committee',
                        'ועדת חקירה פרלמנטרית בנושא: גילוי השחיתות בממשל במדינת ישראל': 'Corruption_Committee',
                        'ועדת המשנה למדיניות חוץ והסברה': 'Foreign_Sub_Committee',
                        'ועדת משנה זמנית למודיעין': 'Intelligent_Sub_Committee',
                        'ועדת המשנה הזמנית לבחינת מוכנות העורף במצבי חירום': 'Security_Sub_Committee',
                        'ועדה משותפת זמנית של ועדת הכספים וועדת החוץ והביטחון - לתקציב הביטחון ': 'Security_Committee',
                        'הוועדה המשותפת לוועדה המסדרת ולוועדה הזמנית לענייני כספים בנושא תקציב הכנסת ': 'Finance_Committee',
                        'ועדת המשנה לקידום עסקים קטנים ובינוניים של ועדת הכלכלה': 'Finance_Committee',
                        'ועדה מיוחדת לענין לקחי אסון גשר המכביה': 'Maccabia_Committee'}
    return title_dictionary[title]


def scrape_committees_protocols(url, cookies, headers, data, save_path, title_com):
    response = requests.post(url, cookies=cookies, headers=headers, data=data)
    soup = BeautifulSoup(response.text, "html.parser")
    jobs = soup.find_all('table')
    items = []
    protocolss = []
    dates = []

    # Loop through all committee protocols
    for job in jobs:
        item = job.find_all('div', class_='ComProtocolsItemDate')
        if len(item) > 0:
            items.append(item)
            protocolss.append(job.find_all('a'))

    # Find date of committee protocol
    for item in items[0]:
        date = item.find('span').string
        if 'פרוטוקול' not in date:
            date = date.split(',')[0]
            date = date.split(' ')[0] + '_' + str(convert_month_to_num(date.split(' ')[1])) + '_' + date.split(' ')[2]
            dates.append(date)

    # Committee name and protocols
    title = translate_title(title_com)
    protocols = []
    for protocol in protocolss[0]:
        try:
            if '.doc' in protocol['href']:
                protocols.append(protocol['href'])
        except:
            continue
    protocols = np.unique(protocols)

    # Save protocols with the committee name and the date
    counter = 1
    for ind, document_url in enumerate(protocols):
        if '.doc' in document_url:
            print('Getting file: {}'.format(document_url))
            counter = counter + 1 if ind != 0 and dates[ind] == dates[ind - 1] else 1
            page = requests.get(document_url, cookies=cookies, headers=headers)
            file_to_store = title + '_' + dates[ind] + '_' + str(counter) + '.doc'
            with open(save_path + '/' + title + '/' + file_to_store, 'wb') as f_out:
                f_out.write(page.content)


def substring_index(the_list, substring):
    for i, s in enumerate(the_list):
        if substring in s:
            return i
    return 10000000 * 10000000


def convert_month_to_num(text_date):
    date_dict = {'בינואר': 1, 'בפברואר': 2, 'במרץ': 3, 'במרס': 3, 'באפריל': 4, 'במאי': 5, 'ביוני': 6,
                 'ביולי': 7, 'באוגוסט': 8, 'בספטמבר': 9, 'באוקטובר': 10, 'בנומבמר': 11, 'בדצמבר': 12}
    return int(date_dict[text_date])


class Knesset:
    def __init__(self, save_path, knesset_number):
        self.save_path = save_path
        self.knesset_number = knesset_number
        self.knesset_members = []
        self.parties = []
        self.committees = []
        self.melia_meetings = []

    class KnessetMember:

        def __init__(self, person_id, first_name, last_name, gender, role_id, role_desc):
            self.person_id = person_id
            self.first_name = first_name
            self.last_name = last_name
            self.gender_id = gender
            self.role_id = role_id
            self.role_desc = role_desc

    class Party:

        def __init__(self, id, name, s_date, f_date):
            self.party_id = id
            self.party_name = name
            self.party_start_date = s_date
            self.party_finish_date = f_date
            self.party_members = []
            self.in_coalition = None

    class Committee:

        def __init__(self, name, protocols):
            self.committee_name = name
            self.committee_protocols = protocols
            self.committee_meetings = []
            self.chairman = ''

        class CommitteeMeeting:

            def __init__(self, doc):
                self.meeting_document = doc
                self.committee = ''  # Which committee held the meeting
                self.protocol_number = 0
                self.subject = ''
                self.date = ''
                self.meeting_length = 0  # Length of the meeting
                self.chairman = ''
                self.participants_parties = {}  # All participants and the parties they belong to
                self.participants_sayings = {}  # All sayings in the meeting of every participant
                self.all_text = []  # All sayings in the meeting

            def process_meeting_file(self, com):
                self.committee = com
                # Go through all paragraphs in the document
                for p in self.meeting_document.paragraphs:
                    if len(p.text) > 0:
                        text = p.text.strip('\n')
                        text = text.strip('\t')
                        # Save all separated text
                        self.all_text.append(text)

                    # Save 'dry' data about the meeting
                    if len(p.runs) > 0:
                        if 'פרוטוקול מס' in p.runs[0].text:
                            try:
                                self.protocol_number = int(p.runs[1].text)
                            except:
                                temp = p.runs[0].text
                                temp = temp.split(' ')
                                temp = temp[len(temp) - 1]
                                if ',' in temp:
                                    temp = temp[-1]
                                try:
                                    self.protocol_number = int(temp)
                                except:
                                    print("Error in protocol number")
                        elif '<< נושא >>' in p.runs[0].text:
                            try:
                                self.subject = p.runs[1].text
                            except:
                                print("Error with the committee subject")
                        elif '<< יור >>' in p.runs[0].text:
                            try:
                                self.chairman = p.runs[1].text
                                self.chairman = self.chairman.lstrip('היו"ר ')
                                self.chairman = self.chairman.rstrip(':')
                                self.participants_parties[self.chairman] = ''
                                self.participants_sayings[self.chairman] = []
                            except:
                                print("Problem with chairman")

                # Calculate meeting length and date
                try:
                    date = self.all_text[substring_index(self.all_text, 'סדר היום') - 1]
                    date = date[date.find("(") + 1: date.find(")")].split()
                    self.date = dt.date(int(date[2]), convert_month_to_num(date[1]), int(date[0]))

                    start_time = self.all_text[substring_index(self.all_text, 'סדר היום') - 1][-5:]
                    if start_time[0] == ' ':
                        start_time = '0' + start_time[1:]
                except:
                    print("Error with meeting date")
                try:
                    end_time = self.all_text[substring_index(self.all_text, '<< סיום >>')]
                    end_time = end_time.strip('<< סיום >>')
                    end_time = end_time.strip('הישיבה ננעלה בשעה')
                    end_time = end_time.strip(' ')
                    end_time = end_time.strip('.')
                    t1 = datetime.strptime(start_time, "%H:%M")
                    t2 = datetime.strptime(end_time, "%H:%M")
                    self.meeting_length = (t2 - t1).total_seconds() / 3600
                except:
                    print("Error with meeting time")

                # Save the committee members
                start = substring_index(self.all_text, 'חברי הוועדה:')
                muzmanim = substring_index(self.all_text, 'מוזמנים:')
                havrei = substring_index(self.all_text, 'חברי הכנסת:')
                mishpati = substring_index(self.all_text, 'ייעוץ משפטי:')
                menahel = substring_index(self.all_text, 'מנהל הוועדה:')
                end = min(muzmanim, havrei, mishpati, menahel)
                for member in self.all_text[start + 2: end]:
                    self.participants_parties[member] = ''
                    self.participants_sayings[member] = list()

                # Save all members' sayings
                for ind, statement in enumerate(self.all_text):
                    if '<< יור >>' in statement:
                        speaker = statement.strip('<< יור >>')
                        speaker = speaker.strip('היו"ר ')
                        speaker = speaker.strip(':')
                        if speaker in self.participants_sayings.keys():
                            self.participants_sayings[speaker].append(self.all_text[ind + 1])

                    elif '<< דובר >>' in statement:
                        speaker = statement.strip('<< דובר >>')
                        speaker = "".join(re.split("\(|\)", speaker)[::2])
                        speaker = speaker.strip(' :')
                        if speaker in self.participants_sayings.keys():
                            self.participants_sayings[speaker].append(self.all_text[ind + 1])

        def process_protocols(self, k_num, com):
            doc_counter = 1
            for protocol in self.committee_protocols:
                committee_meeting = self.CommitteeMeeting(protocol)
                committee_meeting.process_meeting_file(com)
                self.committee_meetings.append(committee_meeting)
                print("Finished processing meeting:", doc_counter, "of committee:", str(com), "in knesset:", str(k_num))
                doc_counter += 1

    class MeliaMeeting:

        def __init__(self, doc):
            self.meeting_document = doc
            self.subject = ''
            self.date = ''
            self.length = 0  # Length of the meeting
            self.participants_parties = {}  # All participants and the parties they belong to
            self.chairman = ''
            self.all_text = []  # All sayings in the meeting
            self.participants_sayings = {}  # All sayings in the meeting of every participant


# -------------------------------------------------------------------------------------------------------------------- #

if __name__ == '__main__':

    cookies = {
        '_ga': 'GA1.3.2073727564.1677485208',
        'WSS_FullScreenMode': 'false',
        'rbzsessionid': '3154698217a73420dd908d748047ecf1',
        'rbzid': 'DxxW2a0GyK0RdD7N9YBMUxf0sw39PpsHdUKdTvIv5kimNVLPp9UX+HsPEiBcyyCuLRfcI/YC4MfO6v0pl3ROTomYfiNR19Urz2JqqkRq0By6CsDYYIhvgIBvMZuyxPuvEVR7rQSRlkOr21xbECnYV+TjqCmnrJmIOGbdeqzjn/8fB0HUweRyIaSuPMaJ4QQAn8sTwElMtt0HI+CshRQ85gzbKviJLEbyzvctEvbmRud24lvQLfBSwvyCUuz3ctF9L769AOh/G40KHoB/4yLty3NCAMgWOr0jkp9TrrQ2Rgu5QaNtNWhRhKxH/vV33CUX',
        '_gid': 'GA1.3.1465954254.1679780721',
        'ab.storage.deviceId.a9882122-ac6c-486a-bc3b-fab39ef624c5': '%7B%22g%22%3A%226259141a-f7a8-159b-b27d-ba4fceb63716%22%2C%22c%22%3A1679911472186%2C%22l%22%3A1679911472186%7D',
    }

    headers = {
        'authority': 'main.knesset.gov.il',
        'accept': '*/*',
        'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
        'cache-control': 'no-cache',
        'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
        # 'cookie': '_ga=GA1.3.2073727564.1677485208; WSS_FullScreenMode=false; rbzsessionid=3154698217a73420dd908d748047ecf1; rbzid=DxxW2a0GyK0RdD7N9YBMUxf0sw39PpsHdUKdTvIv5kimNVLPp9UX+HsPEiBcyyCuLRfcI/YC4MfO6v0pl3ROTomYfiNR19Urz2JqqkRq0By6CsDYYIhvgIBvMZuyxPuvEVR7rQSRlkOr21xbECnYV+TjqCmnrJmIOGbdeqzjn/8fB0HUweRyIaSuPMaJ4QQAn8sTwElMtt0HI+CshRQ85gzbKviJLEbyzvctEvbmRud24lvQLfBSwvyCUuz3ctF9L769AOh/G40KHoB/4yLty3NCAMgWOr0jkp9TrrQ2Rgu5QaNtNWhRhKxH/vV33CUX; _gid=GA1.3.1465954254.1679780721; ab.storage.deviceId.a9882122-ac6c-486a-bc3b-fab39ef624c5=%7B%22g%22%3A%226259141a-f7a8-159b-b27d-ba4fceb63716%22%2C%22c%22%3A1679911472186%2C%22l%22%3A1679911472186%7D',
        'origin': 'https://main.knesset.gov.il',
        'referer': 'https://main.knesset.gov.il/Activity/committees/Pages/AllCommitteeProtocols.aspx',
        'sec-ch-ua': '"Google Chrome";v="111", "Not(A:Brand";v="8", "Chromium";v="111"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',
        'x-microsoftajax': 'Delta=true',
        'x-requested-with': 'XMLHttpRequest',
    }

# Set path and URL of committees protocols
path = r'D:\yotam\knesset'
url = 'https://main.knesset.gov.il/Activity/committees/Pages/AllCommitteeProtocols.aspx'

# Create a new folder for each knesset and a folder for each committee in every knesset
committees = []
for num in range(25, 26):
    knesset_path = path + '/Knesset_' + str(num)
    if not os.path.exists(knesset_path):
        os.makedirs(knesset_path)

    # Find the committees that exist in the specific knesset
    data = get_search_data(knesset_num_to_text(num))
    response = requests.post(url, cookies=cookies, headers=headers, data=data)
    soup = BeautifulSoup(response.text, "html.parser")
    combo = soup.find_all('div', class_='RadComboBox RadComboBox_Default')
    for comb in combo:
        temp = comb.find('input')
        if 'rcbCommittees' in temp['id']:
            committees = comb.find_all('li')
            committees = committees[1:]

    for com in committees:
        try:
            committee = translate_title(com.string)
            committee_path = knesset_path + '/' + committee
            if not os.path.exists(committee_path):
                os.makedirs(committee_path)

            data = get_search_data(knesset_num_to_text(num), committee_name=com.string)
            scrape_committees_protocols(url, cookies, headers, data, knesset_path, com.string)
            print("Finished downloading protocols of knesset: ", num, " for committee: ", com.string)

        except:
            print("No committee: ", com.string, " In knesset: ", num)

    print("Finished creating folders for knesset: ", num)






